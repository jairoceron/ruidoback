"use strict";(self.webpackChunkdashboard=self.webpackChunkdashboard||[]).push([[7267],{97267:(u,a,o)=>{o.r(a),o.d(a,{default:()=>P});var i=o(61921),_=(o(73513),o(60305)),e=o(82657),c=o(25465),l=o(21092),O=o(6200),d=o(61661),E=o(82059);class P{convertVectorFieldData(s){const t=e.Z.fromJSON(s.pixelBlock),r=(0,O.KC)(t,s.type);return Promise.resolve((0,_.pC)(r)&&r.toJSON())}decode(s){return(0,i.Z)(function*(){const t=yield(0,c.Jx)(s.data,s.options);return t&&t.toJSON()})()}symbolize(s){s.pixelBlock=e.Z.fromJSON(s.pixelBlock),s.extent=s.extent?E.Z.fromJSON(s.extent):null;const t=this.symbolizer.symbolize(s);return Promise.resolve((0,_.pC)(t)&&t.toJSON())}updateSymbolizer(s){var t=this;return(0,i.Z)(function*(){var r;t.symbolizer=d.Z.fromJSON(s.symbolizerJSON),s.histograms&&"rasterStretch"===(null==(r=t.symbolizer)?void 0:r.rendererJSON.type)&&(t.symbolizer.rendererJSON.histograms=s.histograms)})()}stretch(s){const t=this.symbolizer.simpleStretch(e.Z.fromJSON(s.srcPixelBlock),s.stretchParams);return Promise.resolve((0,_.pC)(t)&&t.toJSON())}estimateStatisticsHistograms(s){const t=(0,l.Hv)(e.Z.fromJSON(s.srcPixelBlock));return Promise.resolve(t)}split(s){const t=(0,l.Vl)(e.Z.fromJSON(s.srcPixelBlock),s.tileSize,s.maximumPyramidLevel);return t&&t.forEach((r,n)=>{t.set(n,null==r?void 0:r.toJSON())}),Promise.resolve(t)}mosaicAndTransform(s){return(0,i.Z)(function*(){const t=s.srcPixelBlocks.map(m=>m?new e.Z(m):null),r=(0,l.us)(t,s.srcMosaicSize,null,null,s.alignmentInfo);if(!s.coefs)return r&&r.toJSON();const n=(0,l.Uk)(r,s.destDimension,s.coefs,s.sampleSpacing,s.interpolation);return n&&n.toJSON()})()}}}}]);