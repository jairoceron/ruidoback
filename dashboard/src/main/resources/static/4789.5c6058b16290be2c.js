"use strict";var Qe=Object.defineProperty,qe=Object.defineProperties,et=Object.getOwnPropertyDescriptors,Ze=Object.getOwnPropertySymbols,tt=Object.prototype.hasOwnProperty,nt=Object.prototype.propertyIsEnumerable,Re=Math.pow,je=(ye,j,s)=>j in ye?Qe(ye,j,{enumerable:!0,configurable:!0,writable:!0,value:s}):ye[j]=s,Ge=(ye,j)=>{for(var s in j||(j={}))tt.call(j,s)&&je(ye,s,j[s]);if(Ze)for(var s of Ze(j))nt.call(j,s)&&je(ye,s,j[s]);return ye},He=(ye,j)=>qe(ye,et(j));(self.webpackChunkdashboard=self.webpackChunkdashboard||[]).push([[4789],{43588:(ye,j,s)=>{s.d(j,{e:()=>Q});var I,w,$={exports:{}};I=$,void 0!==(w=function(){function ne(n,r,i){i=i||2;var o,l,v,d,U,ce,Me,Ve=r&&r.length,ze=Ve?r[0]*i:n.length,Te=S(n,0,ze,i,!0),me=[];if(!Te||Te.next===Te.prev)return me;if(Ve&&(Te=function(n,r,i,o){var l,v,d,U=[];for(l=0,v=r.length;l<v;l++)(d=S(n,r[l]*o,l<v-1?r[l+1]*o:n.length,o,!1))===d.next&&(d.steiner=!0),U.push(ee(d));for(U.sort(A),l=0;l<U.length;l++)i=z(i=f(U[l],i),i.next);return i}(n,r,Te,i)),n.length>80*i){o=v=n[0],l=d=n[1];for(var fe=i;fe<ze;fe+=i)(U=n[fe])<o&&(o=U),(ce=n[fe+1])<l&&(l=ce),U>v&&(v=U),ce>d&&(d=ce);Me=0!==(Me=Math.max(v-o,d-l))?1/Me:0}return H(Te,me,i,o,l,Me),me}function S(n,r,i,o,l){var v,d;if(l===Ue(n,r,i,o)>0)for(v=r;v<i;v+=o)d=be(v,n[v],n[v+1],d);else for(v=i-o;v>=r;v-=o)d=be(v,n[v],n[v+1],d);if(d&&Ae(d,d.next)){var U=d.next;Ce(d),d=U}return d}function z(n,r){if(!n)return n;r||(r=n);var i,o=n;do{if(i=!1,o.steiner||!Ae(o,o.next)&&0!==Z(o.prev,o,o.next))o=o.next;else{var l=o.prev;if(Ce(o),(o=r=l)===o.next)break;i=!0}}while(i||o!==r);return r}function H(n,r,i,o,l,v,d){if(n){!d&&v&&O(n,o,l,v);for(var U,ce,Me=n;n.prev!==n.next;)if(U=n.prev,ce=n.next,v?ae(n,o,l,v):k(n))r.push(U.i/i),r.push(n.i/i),r.push(ce.i/i),Ce(n),n=ce.next,Me=ce.next;else if((n=ce)===Me){d?1===d?H(n=de(z(n),r,i),r,i,o,l,v,2):2===d&&b(n,r,i,o,l,v):H(z(n),r,i,o,l,v,1);break}}}function k(n){var r=n.prev,i=n,o=n.next;if(Z(r,i,o)>=0)return!1;for(var l=n.next.next;l!==n.prev;){if(ie(r.x,r.y,i.x,i.y,o.x,o.y,l.x,l.y)&&Z(l.prev,l,l.next)>=0)return!1;l=l.next}return!0}function ae(n,r,i,o){var l=n.prev,v=n,d=n.next;if(Z(l,v,d)>=0)return!1;for(var Me=l.x>v.x?l.x>d.x?l.x:d.x:v.x>d.x?v.x:d.x,Ve=l.y>v.y?l.y>d.y?l.y:d.y:v.y>d.y?v.y:d.y,ze=V(l.x<v.x?l.x<d.x?l.x:d.x:v.x<d.x?v.x:d.x,l.y<v.y?l.y<d.y?l.y:d.y:v.y<d.y?v.y:d.y,r,i,o),Te=V(Me,Ve,r,i,o),me=n.prevZ,fe=n.nextZ;me&&me.z>=ze&&fe&&fe.z<=Te;){if(me!==n.prev&&me!==n.next&&ie(l.x,l.y,v.x,v.y,d.x,d.y,me.x,me.y)&&Z(me.prev,me,me.next)>=0||(me=me.prevZ,fe!==n.prev&&fe!==n.next&&ie(l.x,l.y,v.x,v.y,d.x,d.y,fe.x,fe.y)&&Z(fe.prev,fe,fe.next)>=0))return!1;fe=fe.nextZ}for(;me&&me.z>=ze;){if(me!==n.prev&&me!==n.next&&ie(l.x,l.y,v.x,v.y,d.x,d.y,me.x,me.y)&&Z(me.prev,me,me.next)>=0)return!1;me=me.prevZ}for(;fe&&fe.z<=Te;){if(fe!==n.prev&&fe!==n.next&&ie(l.x,l.y,v.x,v.y,d.x,d.y,fe.x,fe.y)&&Z(fe.prev,fe,fe.next)>=0)return!1;fe=fe.nextZ}return!0}function de(n,r,i){var o=n;do{var l=o.prev,v=o.next.next;!Ae(l,v)&&ue(l,o,o.next,v)&&L(l,v)&&L(v,l)&&(r.push(l.i/i),r.push(o.i/i),r.push(v.i/i),Ce(o),Ce(o.next),o=n=v),o=o.next}while(o!==n);return z(o)}function b(n,r,i,o,l,v){var d=n;do{for(var U=d.next.next;U!==d.prev;){if(d.i!==U.i&&Ie(d,U)){var ce=te(d,U);return d=z(d,d.next),ce=z(ce,ce.next),H(d,r,i,o,l,v),void H(ce,r,i,o,l,v)}U=U.next}d=d.next}while(d!==n)}function A(n,r){return n.x-r.x}function f(n,r){var i=function(n,r){var i,o=r,l=n.x,v=n.y,d=-1/0;do{if(v<=o.y&&v>=o.next.y&&o.next.y!==o.y){var U=o.x+(v-o.y)*(o.next.x-o.x)/(o.next.y-o.y);if(U<=l&&U>d){if(d=U,U===l){if(v===o.y)return o;if(v===o.next.y)return o.next}i=o.x<o.next.x?o:o.next}}o=o.next}while(o!==r);if(!i)return null;if(l===d)return i;var ce,Me=i,Ve=i.x,ze=i.y,Te=1/0;o=i;do{l>=o.x&&o.x>=Ve&&l!==o.x&&ie(v<ze?l:d,v,Ve,ze,v<ze?d:l,v,o.x,o.y)&&(ce=Math.abs(v-o.y)/(l-o.x),L(o,n)&&(ce<Te||ce===Te&&(o.x>i.x||o.x===i.x&&D(i,o)))&&(i=o,Te=ce)),o=o.next}while(o!==Me);return i}(n,r);if(!i)return r;var o=te(i,n),l=z(i,i.next);return z(o,o.next),r===i?l:r}function D(n,r){return Z(n.prev,n,r.prev)<0&&Z(r.next,n,n.next)<0}function O(n,r,i,o){var l=n;do{if(null===l.z&&(l.z=V(l.x,l.y,r,i,o)),l.prev.next!==l||l.next.prev!==l)return l.prev.next=l,l.next.prev=l,O(n,r,i,o);l.prevZ=l.prev,l.nextZ=l.next,l=l.next}while(l!==n);l.prevZ.nextZ=null,l.prevZ=null,function(n){var r,i,o,l,v,d,U,ce,Me=1;do{for(i=n,n=null,v=null,d=0;i;){for(d++,o=i,U=0,r=0;r<Me&&(U++,o=o.nextZ);r++);for(ce=Me;U>0||ce>0&&o;)0!==U&&(0===ce||!o||i.z<=o.z)?(l=i,i=i.nextZ,U--):(l=o,o=o.nextZ,ce--),v?v.nextZ=l:n=l,l.prevZ=v,v=l;i=o}v.nextZ=null,Me*=2}while(d>1)}(l)}function V(n,r,i,o,l){return(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=32767*(n-i)*l)|n<<8))|n<<4))|n<<2))|n<<1))|(r=1431655765&((r=858993459&((r=252645135&((r=16711935&((r=32767*(r-o)*l)|r<<8))|r<<4))|r<<2))|r<<1))<<1}function ee(n){var r=n,i=n;do{(r.x<i.x||r.x===i.x&&r.y<i.y)&&(i=r),r=r.next}while(r!==n);return i}function ie(n,r,i,o,l,v,d,U){return(l-d)*(r-U)-(n-d)*(v-U)>=0&&(n-d)*(o-U)-(i-d)*(r-U)>=0&&(i-d)*(v-U)-(l-d)*(o-U)>=0}function Ie(n,r){return n.next.i!==r.i&&n.prev.i!==r.i&&!function(n,r){var i=n;do{if(i.i!==n.i&&i.next.i!==n.i&&i.i!==r.i&&i.next.i!==r.i&&ue(i,i.next,n,r))return!0;i=i.next}while(i!==n);return!1}(n,r)&&(L(n,r)&&L(r,n)&&function(n,r){var i=n,o=!1,l=(n.x+r.x)/2,v=(n.y+r.y)/2;do{i.y>v!=i.next.y>v&&i.next.y!==i.y&&l<(i.next.x-i.x)*(v-i.y)/(i.next.y-i.y)+i.x&&(o=!o),i=i.next}while(i!==n);return o}(n,r)&&(Z(n.prev,n,r.prev)||Z(n,r.prev,r))||Ae(n,r)&&Z(n.prev,n,n.next)>0&&Z(r.prev,r,r.next)>0)}function Z(n,r,i){return(r.y-n.y)*(i.x-r.x)-(r.x-n.x)*(i.y-r.y)}function Ae(n,r){return n.x===r.x&&n.y===r.y}function ue(n,r,i,o){var l=y(Z(n,r,i)),v=y(Z(n,r,o)),d=y(Z(i,o,n)),U=y(Z(i,o,r));return l!==v&&d!==U||!(0!==l||!h(n,i,r))||!(0!==v||!h(n,o,r))||!(0!==d||!h(i,n,o))||!(0!==U||!h(i,r,o))}function h(n,r,i){return r.x<=Math.max(n.x,i.x)&&r.x>=Math.min(n.x,i.x)&&r.y<=Math.max(n.y,i.y)&&r.y>=Math.min(n.y,i.y)}function y(n){return n>0?1:n<0?-1:0}function L(n,r){return Z(n.prev,n,n.next)<0?Z(n,r,n.next)>=0&&Z(n,n.prev,r)>=0:Z(n,r,n.prev)<0||Z(n,n.next,r)<0}function te(n,r){var i=new De(n.i,n.x,n.y),o=new De(r.i,r.x,r.y),l=n.next,v=r.prev;return n.next=r,r.prev=n,i.next=l,l.prev=i,o.next=i,i.prev=o,v.next=o,o.prev=v,o}function be(n,r,i,o){var l=new De(n,r,i);return o?(l.next=o.next,l.prev=o,o.next.prev=l,o.next=l):(l.prev=l,l.next=l),l}function Ce(n){n.next.prev=n.prev,n.prev.next=n.next,n.next=n,n.prev=n,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function De(n,r,i){this.i=n,this.x=r,this.y=i,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function Ue(n,r,i,o){for(var l=0,v=r,d=i-o;v<i;v+=o)l+=(n[d]-n[v])*(n[v+1]+n[d+1]),d=v;return l}return ne.deviation=function(n,r,i,o){var l=r&&r.length,d=Math.abs(Ue(n,0,l?r[0]*i:n.length,i));if(l)for(var U=0,ce=r.length;U<ce;U++)d-=Math.abs(Ue(n,r[U]*i,U<ce-1?r[U+1]*i:n.length,i));var ze=0;for(U=0;U<o.length;U+=3){var Te=o[U]*i,me=o[U+1]*i,fe=o[U+2]*i;ze+=Math.abs((n[Te]-n[fe])*(n[me+1]-n[Te+1])-(n[Te]-n[me])*(n[fe+1]-n[Te+1]))}return 0===d&&0===ze?0:Math.abs((ze-d)/d)},ne.flatten=function(n){for(var r=n[0][0].length,i={vertices:[],holes:[],dimensions:r},o=0,l=0;l<n.length;l++){for(var v=0;v<n[l].length;v++)for(var d=0;d<r;d++)i.vertices.push(n[l][v][d]);l>0&&i.holes.push(o+=n[l-1].length)}return i},ne}())&&(I.exports=w);var Q=$.exports},69096:(ye,j,s)=>{function I(){return new Float32Array(4)}function w(D,O,M,V){const ee=new Float32Array(4);return ee[0]=D,ee[1]=O,ee[2]=M,ee[3]=V,ee}function Q(){return I()}function ne(){return w(1,1,1,1)}function S(){return w(1,0,0,0)}function z(){return w(0,1,0,0)}function H(){return w(0,0,1,0)}function k(){return w(0,0,0,1)}s.d(j,{f:()=>w});const ae=Q(),de=ne(),b=S(),T=z(),A=H(),f=k();Object.freeze({__proto__:null,create:I,clone:function(D){const O=new Float32Array(4);return O[0]=D[0],O[1]=D[1],O[2]=D[2],O[3]=D[3],O},fromValues:w,createView:function(D,O){return new Float32Array(D,O,4)},zeros:Q,ones:ne,unitX:S,unitY:z,unitZ:H,unitW:k,ZEROS:ae,ONES:de,UNIT_X:b,UNIT_Y:T,UNIT_Z:A,UNIT_W:f})},27477:(ye,j,s)=>{s.d(j,{br:()=>H,qE:()=>ae});var I=s(60305),F=s(19554),w=s(61274),$=s(3878),Q=s(21092),ne=s(66505),S=s(25522);const z={bandCount:3,outMin:0,outMax:1,minCutOff:[0,0,0],maxCutOff:[255,255,255],factor:[1/255,1/255,1/255],useGamma:!1,gamma:[1,1,1],gammaCorrection:[1,1,1],colormap:null,colormapOffset:null,stretchType:"none",type:"stretch"};class H extends ne.s{constructor(b=null,T=null,A=null){super(),this._textureInvalidated=!0,this._colormapTextureInvalidated=!0,this._supportsBilinearTexture=!0,this.stencilRef=0,this.coordScale=[1,1],this._symbolizerParameters=null,this.height=null,this.isRendereredSource=!1,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this.rawPixelData=null,this._suspended=!1,this._bandIds=null,this._interpolation=null,this._transformGrid=null,this.width=null,this.x=0,this.y=0,this.source=b,this.transformGrid=T,this.interpolation=A}destroy(){const b=this.getTextures();null==b||b.textures.forEach(T=>T.dispose()),this._rasterTexture=null,this._transformGridTexture=null,this._colormapTexture=null}get symbolizerParameters(){return this._symbolizerParameters||z}set symbolizerParameters(b){this._symbolizerParameters!==b&&(this._symbolizerParameters=b,this._colormapTextureInvalidated=!0)}get source(){return this._source}set source(b){this._source!==b&&(this._source=b,this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null),this.invalidateTexture())}get suspended(){return this._suspended}set suspended(b){this._suspended&&!b&&this.stage&&(this.ready(),this.requestRender()),this._suspended=b}get bandIds(){return this._bandIds}set bandIds(b){this._bandIds=b,this._isBandIdschanged(b)&&this.invalidateTexture()}get interpolation(){return this._interpolation||"nearest"}set interpolation(b){this._interpolation=b,this._rasterTexture&&this._rasterTexture.setSamplingMode("bilinear"===this._getTextureSamplingMethod(b)?9729:9728)}get transformGrid(){return this._transformGrid}set transformGrid(b){this._transformGrid=b,this._transformGridTexture&&(this._transformGridTexture.dispose(),this._transformGridTexture=null)}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRender())}_createTransforms(){return{dvs:(0,w.c)()}}setTransform(b){const T=(0,F.b)(this.transforms.dvs),[A,f]=b.toScreenNoRotation([0,0],[this.x,this.y]),C=this.resolution/this.pixelRatio/b.resolution,D=C*this.width,O=C*this.height,M=Math.PI*this.rotation/180;(0,F.c)(T,T,(0,$.f)(A,f)),(0,F.c)(T,T,(0,$.f)(D/2,O/2)),(0,F.r)(T,T,-M),(0,F.c)(T,T,(0,$.f)(-D/2,-O/2)),(0,F.j)(T,T,(0,$.f)(D,O)),(0,F.m)(this.transforms.dvs,b.displayViewMat3,T)}getTextures(){if(!this._rasterTexture)return null;const b=[],T=[];return this._transformGridTexture&&(T.push(this._transformGridTexture),b.push("u_transformGrid")),this._rasterTexture&&(T.push(this._rasterTexture),b.push("u_image")),this._colormapTexture&&(T.push(this._colormapTexture),b.push("u_colormap")),{names:b,textures:T}}onAttach(){this.invalidateTexture()}onDetach(){this.invalidateTexture()}updateTexture({context:b}){var T,A,f;if(!this.stage)return null==(T=this._rasterTexture)||T.dispose(),null==(A=this._transformGridTexture)||A.dispose(),null==(f=this._colormapTexture)||f.dispose(),this._rasterTexture=null,this._rasterTextureBandIds=null,this._transformGridTexture=null,void(this._colormapTexture=null);const C=this._isValidSource(this.source);C&&this._colormapTextureInvalidated&&(this._colormapTextureInvalidated=!1,this._updateColormapTexture(b)),this._textureInvalidated&&(this._textureInvalidated=!1,this._createOrDestroyRasterTexture(b),this._rasterTexture&&(C?this.transformGrid&&!this._transformGridTexture&&(this._transformGridTexture=(0,S.Br)(b,this.transformGrid)):this._rasterTexture.setData(null)),this.suspended||(this.ready(),this.requestRender()))}_createOrDestroyRasterTexture(b){var T,A;const f=(0,I.pC)(this.source)?(0,Q.qF)(this.source,this.bandIds):null;if(!this._isValidSource(f))return void(this._rasterTexture&&(this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null));const C=!this._isBandIdschanged(this.bandIds);if(this._rasterTexture){if(C)return;this._rasterTexture.dispose(),this._rasterTextureBandIds=null,this._rasterTexture=null}this._supportsBilinearTexture=null==(T=b.capabilities.textureFloat)?void 0:T.textureFloatLinear;const D=this._getTextureSamplingMethod(this.interpolation),O=this.isRendereredSource||!(null!=(A=b.capabilities.textureFloat)&&A.textureFloat);this._rasterTexture=(0,S.s9)(b,f,D,O),this._rasterTextureBandIds=this.bandIds?[...this.bandIds]:null}_isBandIdschanged(b){const T=this._rasterTextureBandIds;return!(null==T&&null==b||T&&b&&T.join("")===b.join(""))}_isValidSource(b){var T;return(0,I.pC)(b)&&(null==(T=b.pixels)?void 0:T.length)>0}_getTextureSamplingMethod(b){const{type:T,colormap:A}=this.symbolizerParameters,f="lut"===T||"stretch"===T&&(0,I.pC)(A);return!this._supportsBilinearTexture||f||"bilinear"!==b&&"cubic"!==b?"nearest":"bilinear"}_updateColormapTexture(b){const T=this._colormap,A=this.symbolizerParameters.colormap;return A?T?A.length!==T.length||A.some((f,C)=>f!==T[C])?(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),this._colormapTexture=(0,S.iC)(b,A),void(this._colormap=A)):void 0:(this._colormapTexture=(0,S.iC)(b,A),void(this._colormap=A)):(this._colormapTexture&&(this._colormapTexture.dispose(),this._colormapTexture=null),void(this._colormap=null))}}function ae(de){return(0,I.pC)(de.source)}},56109:(ye,j,s)=>{s.d(j,{U:()=>Ye});var I=s(99155),F=s(10269),w=s(19202);const $={nearest:{defines:[],samplingMode:9728,mips:!1},bilinear:{defines:[],samplingMode:9729,mips:!1},bicubic:{defines:["bicubic"],samplingMode:9729,mips:!1},trilinear:{defines:[],samplingMode:9987,mips:!0}};var S=s(60305),z=s(69096),H=s(20547),k=s(19804),ae=s(91522),T=s(86932),A=s(3953),f=s(22791),C=s(61274),D=s(26436),Z=(s(27001),s(67474),s(36320),s(40150),s(94345),s(82705),s(13006)),Ae=s(48082),ue=s(38963),h=s(1452);const L=1/65536;var be=s(3878),Ce=s(18159),De=s(42367);var r=s(71710);class i extends w.Z{prepareState({context:a},u,c){const P=c&&-1!==c.indexOf("id");a.setBlendingEnabled(!P),a.setBlendFunctionSeparate(1,771,1,771),a.setColorMask(!0,!0,!0,!0),a.setStencilWriteMask(0),a.setStencilTestEnabled(!0),a.setStencilFunction(514,u.stencilRef,255)}draw(a,u,c){const P=this.getGeometryType();u.commit(a);const _=u.getGeometry(P);(0,S.Wi)(_)||(a.timeline.begin(this.name),a.attributeView.bindTextures(a.context),_.forEachCommand(g=>this.drawGeometry(a,u,g,c)))}_setSharedUniforms(a,u,c){const{displayLevel:P,pixelRatio:_,state:g}=u;a.setUniform1f("u_pixelRatio",_),a.setUniformMatrix3fv("u_dvsMat3",c.transforms.dvs,!1,!0),a.setUniformMatrix3fv("u_displayViewMat3",g.displayViewMat3,!1,!0),a.setUniform1f("u_currentZoom",Math.round(P*I.MI)),a.setUniform1i("u_attributeTextureSize",u.attributeView.size),a.setUniform1i("u_attributeData0",I.iJ),a.setUniform1i("u_attributeData1",I.nM),a.setUniform1i("u_attributeData2",I.Ij),a.setUniform1i("u_attributeData3",I.f2)}}var o=s(21194),fe=s(27477),Ee=s(25522),Ke=s(40085);const Ye={marker:class extends i{dispose(){}getGeometryType(){return ue.LW.MARKER}drawGeometry(a,u,c,P){const{context:_,painter:g,rendererInfo:p,state:B}=a,x=o.mE.load(c.materialKey),{bufferLayouts:N,attributes:E}=(0,H.cM)(x.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_vertexOffset",count:2,type:5122},{location:2,name:"a_texCoords",count:2,type:5123},{location:3,name:"a_bitSetAndDistRatio",count:2,type:5123},{location:4,name:"a_id",count:4,type:5121},{location:5,name:"a_color",count:4,type:5121,normalized:!0},{location:6,name:"a_outlineColor",count:4,type:5121,normalized:!0},{location:7,name:"a_sizeAndOutlineWidth",count:4,type:5121},{location:8,name:"a_zoomRange",count:2,type:5123}]}),m=g.materialManager.getMaterialProgram(a,x,"materials/icon",E,P);if(_.useProgram(m),x.textureBinding&&g.textureManager.bindTextures(_,m,x,!0),this._setSharedUniforms(m,a,u),m.setUniformMatrix3fv("u_displayMat3",x.vvRotation?B.displayViewMat3:B.displayMat3),x.vvSizeMinMaxValue&&m.setUniform4fv("u_vvSizeMinMaxValue",p.vvSizeMinMaxValue),x.vvSizeScaleStops&&m.setUniform1f("u_vvSizeScaleStopsValue",p.vvSizeScaleStopsValue),x.vvSizeFieldStops){const J=p.getSizeVVFieldStops(u.key.level);m.setUniform1fv("u_vvSizeFieldStopsValues",J.values),m.setUniform1fv("u_vvSizeFieldStopsSizes",J.sizes)}x.vvSizeUnitValue&&m.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",p.vvSizeUnitValueToPixelsRatio),x.vvColor&&(m.setUniform1fv("u_vvColorValues",p.vvColorValues),m.setUniform4fv("u_vvColors",p.vvColors)),x.vvOpacity&&(m.setUniform1fv("u_vvOpacityValues",p.vvOpacityValues),m.setUniform1fv("u_vvOpacities",p.vvOpacities)),x.vvRotation&&m.setUniform1f("u_vvRotationType","geographic"===p.vvMaterialParameters.vvRotationType?0:1),c.draw(_,N,E)}},line:class extends i{dispose(){}getGeometryType(){return ue.LW.LINE}drawGeometry(a,u,c,P){const{context:_,painter:g,rendererInfo:p,displayLevel:B}=a,x=o.a.load(c.materialKey),{bufferLayouts:N,attributes:E}=(0,H.cM)(x.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_offsetAndNormal",count:4,type:5120},{location:4,name:"a_accumulatedDistanceAndHalfWidth",count:2,type:5123},{location:5,name:"a_tlbr",count:4,type:5123},{location:6,name:"a_segmentDirection",count:4,type:5120},{location:7,name:"a_aux",count:2,type:5123},{location:8,name:"a_zoomRange",count:2,type:5123}]}),m=g.materialManager.getMaterialProgram(a,x,"materials/line",E,P),R=1/a.pixelRatio;_.useProgram(m),this._setSharedUniforms(m,a,u),x.textureBinding&&g.textureManager.bindTextures(_,m,x);const ge=Re(2,B-u.key.level)/a.pixelRatio;if(m.setUniform1f("u_zoomFactor",ge),m.setUniform1f("u_blur",0+R),m.setUniform1f("u_antialiasing",R),x.vvSizeMinMaxValue&&m.setUniform4fv("u_vvSizeMinMaxValue",p.vvSizeMinMaxValue),x.vvSizeScaleStops&&m.setUniform1f("u_vvSizeScaleStopsValue",p.vvSizeScaleStopsValue),x.vvSizeFieldStops){const oe=p.getSizeVVFieldStops(u.key.level);m.setUniform1fv("u_vvSizeFieldStopsValues",oe.values),m.setUniform1fv("u_vvSizeFieldStopsSizes",oe.sizes)}x.vvSizeUnitValue&&m.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",p.vvSizeUnitValueToPixelsRatio),x.vvColor&&(m.setUniform1fv("u_vvColorValues",p.vvColorValues),m.setUniform4fv("u_vvColors",p.vvColors)),x.vvOpacity&&(m.setUniform1fv("u_vvOpacityValues",p.vvOpacityValues),m.setUniform1fv("u_vvOpacities",p.vvOpacities)),_.setFaceCullingEnabled(!1),c.draw(_,N,E)}},fill:class extends i{constructor(){super(...arguments),this._dotTextureSize=0,this._dotTextures=null,this._dotSamplers=new Int32Array([I.kF,I.yP])}dispose(){this._disposeTextures()}getGeometryType(){return ue.LW.FILL}drawGeometry(a,u,c,P){const{context:_,painter:g,rendererInfo:p,requiredLevel:B}=a,x=o.dk.load(c.materialKey),{bufferLayouts:N,attributes:E}=(0,H.cM)((xe=x).data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},...xe.dotDensity?[]:[{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_tlbr",count:4,type:5123},{location:4,name:"a_aux1",count:4,type:5121},{location:5,name:"a_aux2",count:2,type:5123},{location:6,name:"a_aux3",count:4,type:5121},{location:7,name:"a_zoomRange",count:2,type:5123}],...xe.dotDensity?[{location:2,name:"a_inverseArea",count:1,type:5126}]:[]]}),m=g.materialManager.getMaterialProgram(a,x,"materials/fill",E,P);var xe;if(_.useProgram(m),this._setSharedUniforms(m,a,u),x.textureBinding){g.textureManager.bindTextures(_,m,x);const R=1/Re(2,B-u.key.level)/a.pixelRatio;m.setUniform1f("u_zoomFactor",R)}if(x.vvColor&&(m.setUniform1fv("u_vvColorValues",p.vvColorValues),m.setUniform4fv("u_vvColors",p.vvColors)),x.vvOpacity&&(m.setUniform1fv("u_vvOpacityValues",p.vvOpacityValues),m.setUniform1fv("u_vvOpacities",p.vvOpacities)),x.dotDensity){const R=I.I_/p.ddDotSize,J=R*window.devicePixelRatio*R*window.devicePixelRatio,ge=1/Re(2,B-u.key.level),oe=1/ge*(1/ge),_e=p.ddDotScale?a.state.scale/p.ddDotScale:1;m.setUniform1f("u_tileZoomFactor",ge),m.setUniform1f("u_tileDotsOverArea",J/(I.I_*window.devicePixelRatio*I.I_*window.devicePixelRatio)),m.setUniformMatrix4fv("u_dotColors",p.ddColors),m.setUniform4fv("u_isActive",p.ddActiveDots),m.setUniform4fv("u_dotBackgroundColor",p.ddBackgroundColor),m.setUniform1f("u_dotValue",Math.max(1,p.ddDotValue*_e*oe)),this._bindDotDensityTextures(_,m,p,R)}c.draw(_,N,E)}_disposeTextures(){if(this._dotTextures){for(let a=0;a<this._dotTextures.length;a++)this._dotTextures[a].dispose();this._dotTextures=null}}_bindDotDensityTextures(a,u,c,P){const _=this._createDotDensityTextures(a,P,c.ddSeed);u.setUniform1iv("u_dotTextures",this._dotSamplers);for(let g=0;g<_.length;g++)a.bindTexture(_[g],this._dotSamplers[g])}_createDotDensityTextures(a,u,c){if(this._dotTextureSize===u&&this._seed===c||(this._disposeTextures(),this._dotTextureSize=u,this._seed=c),null===this._dotTextures){const P=new r.Z(c);this._dotTextures=[this._allocDotDensityTexture(a,u,P),this._allocDotDensityTexture(a,u,P)]}return this._dotTextures}_allocDotDensityTexture(a,u,c){const P=new Float32Array(u*u*4);for(let _=0;_<P.length;_++)P[_]=c.getFloat();return new Z.Z(a,{wrapMode:10497,pixelFormat:6408,dataType:5126,samplingMode:9728,width:u,height:u},P)}},text:class extends i{dispose(){}getGeometryType(){return ue.LW.TEXT}drawGeometry(a,u,c,P){const{context:_,painter:g,rendererInfo:p,state:B}=a,x=o.qr.load(c.materialKey),{bufferLayouts:N,attributes:E}=(0,H.cM)(x.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texFontSize",count:4,type:5121},{location:5,name:"a_aux",count:4,type:5120},{location:6,name:"a_zoomRange",count:2,type:5123},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}),m=g.materialManager.getMaterialProgram(a,x,"materials/text",E,P);if(_.useProgram(m),this._setSharedUniforms(m,a,u),g.textureManager.bindTextures(_,m,x),m.setUniformMatrix3fv("u_displayMat3",B.displayMat3),m.setUniformMatrix3fv("u_displayViewMat3",B.displayViewMat3),x.vvSizeMinMaxValue&&m.setUniform4fv("u_vvSizeMinMaxValue",p.vvSizeMinMaxValue),x.vvSizeScaleStops&&m.setUniform1f("u_vvSizeScaleStopsValue",p.vvSizeScaleStopsValue),x.vvSizeFieldStops){const R=p.getSizeVVFieldStops(u.key.level);m.setUniform1fv("u_vvSizeFieldStopsValues",R.values),m.setUniform1fv("u_vvSizeFieldStopsSizes",R.sizes)}x.vvSizeUnitValue&&m.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",p.vvSizeUnitValueToPixelsRatio),x.vvColor&&(m.setUniform1fv("u_vvColorValues",p.vvColorValues),m.setUniform4fv("u_vvColors",p.vvColors)),x.vvOpacity&&(m.setUniform1fv("u_vvOpacityValues",p.vvOpacityValues),m.setUniform1fv("u_vvOpacities",p.vvOpacities)),x.vvRotation&&m.setUniform1f("u_vvRotationType","geographic"===p.vvMaterialParameters.vvRotationType?0:1),m.setUniform1f("u_isHalo",1),c.draw(_,N,E),m.setUniform1f("u_isHalo",0),c.draw(_,N,E)}},label:class extends i{dispose(){}getGeometryType(){return ue.LW.LABEL}drawGeometry(a,u,c,P){const{context:_,painter:g,state:p,rendererInfo:B}=a,x=o.Gq.load(c.materialKey),N=x.mapAligned?1:0;if(!N&&Math.abs(u.key.level-Math.round(100*a.displayLevel)/100)>=1)return;const{bufferLayouts:E,attributes:m}=(0,H.cM)(x.data,{geometry:[{location:0,name:"a_pos",count:2,type:5122},{location:1,name:"a_id",count:4,type:5121},{location:2,name:"a_color",count:4,type:5121,normalized:!0},{location:3,name:"a_haloColor",count:4,type:5121,normalized:!0},{location:4,name:"a_texAndSize",count:4,type:5121},{location:5,name:"a_refSymbolAndPlacementOffset",count:4,type:5121},{location:6,name:"a_glyphData",count:4,type:5121},{location:7,name:"a_vertexOffset",count:2,type:5122},{location:8,name:"a_texCoords",count:2,type:5123}]}),R=g.materialManager.getMaterialProgram(a,x,"materials/label",m,P);a.context.setStencilFunction(514,0,255),_.useProgram(R),this._setSharedUniforms(R,a,u),g.textureManager.bindTextures(_,R,x);const J=1===N?p.displayViewMat3:p.displayMat3;if(x.vvSizeMinMaxValue&&R.setUniform4fv("u_vvSizeMinMaxValue",B.vvSizeMinMaxValue),x.vvSizeScaleStops&&R.setUniform1f("u_vvSizeScaleStopsValue",B.vvSizeScaleStopsValue),x.vvSizeFieldStops){const ge=B.getSizeVVFieldStops(u.key.level);R.setUniform1fv("u_vvSizeFieldStopsValues",ge.values),R.setUniform1fv("u_vvSizeFieldStopsSizes",ge.sizes)}x.vvSizeUnitValue&&R.setUniform1f("u_vvSizeUnitValueWorldToPixelsRatio",B.vvSizeUnitValueToPixelsRatio),R.setUniform1f("u_mapRotation",Math.floor(p.rotation/360*254)),R.setUniform1f("u_mapAligned",N),R.setUniformMatrix3fv("u_displayMat3",J),R.setUniform1f("u_opacity",1),R.setUniform2fv("u_screenSize",a.state.size),R.setUniform1f("u_isHalo",1),c.draw(_,E,m),R.setUniform1f("u_isHalo",0),c.draw(_,E,m),_.setStencilTestEnabled(!0),_.setBlendingEnabled(!0)}},clip:class extends w.Z{constructor(){super(...arguments),this._color=(0,z.f)(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:a}){a.setStencilTestEnabled(!0),a.setBlendingEnabled(!1),a.setFaceCullingEnabled(!1),a.setColorMask(!1,!1,!1,!1),a.setStencilOp(7680,7680,7681),a.setStencilWriteMask(255),a.setStencilFunction(519,0,255)}draw(a,u){const{context:c,state:P}=a,_=(0,H.cM)("clip",{geometry:[{location:0,name:"a_pos",count:2,type:5122}]}),g=u.getVAO(c,P,_.attributes,_.bufferLayouts);(0,S.Wi)(g.indexBuffer)||(this._program||(this._program=(0,ae.H)(c,k.O)),c.useProgram(this._program),this._program.setUniform2fv("u_coord_range",[1,1]),this._program.setUniform4fv("u_color",this._color),this._program.setUniformMatrix3fv("u_dvsMat3",P.displayMat3),c.bindVAO(g),c.drawElements(4,g.indexBuffer.size,5125,0),c.bindVAO())}},stencil:A.Z,bitmap:class extends w.Z{constructor(){super(...arguments),this._desc={vsPath:"raster/bitmap",fsPath:"raster/bitmap",attributes:new Map([["a_position",0],["a_texcoord",1]])}}dispose(){this._quad&&this._quad.dispose()}prepareState({context:a},u){a.setBlendingEnabled(!0),"additive"===u.blendFunction?a.setBlendFunctionSeparate(1,1,1,1):a.setBlendFunctionSeparate(1,771,1,771),a.setColorMask(!0,!0,!0,!0),a.setStencilWriteMask(0),a.setStencilTestEnabled(!0),a.setStencilFunction(514,u.stencilRef,255)}draw(a,u){const{context:c,renderingOptions:P,painter:_}=a;if(!u.source)return;a.timeline.begin(this.name),this._quad||(this._quad=new F.Z(c,[0,0,1,0,0,1,1,1]));const g=((xe,a,u)=>{if("dynamic"===u.samplingMode){const{state:c}=xe,P=a.resolution/a.pixelRatio/c.resolution,_=Math.round(xe.pixelRatio)!==xe.pixelRatio,g=P>1.05||P<.95;return c.rotation||g||_||a.isSourceScaled||a.rotation?$.bilinear:$.nearest}return $[u.samplingMode]})(a,u,P),p=_.materialManager.getProgram(a,this._desc,g.defines),{coordScale:B,computedOpacity:x,transforms:N}=u;u.setSamplingProfile(g),u.bind(a.context,I.Ic),c.useProgram(p),p.setUniformMatrix3fv("u_dvsMat3",N.dvs),p.setUniform1i("u_texture",I.Ic),p.setUniform2fv("u_coordScale",B),p.setUniform1f("u_opacity",x),this._quad.draw(),a.timeline.end(this.name)}},raster:class extends w.Z{constructor(){super(...arguments),this._desc={lut:{vsPath:"raster/lut",fsPath:"raster/lut",attributes:new Map([["a_position",0],["a_texcoord",1]])},stretch:{vsPath:"raster/stretch",fsPath:"raster/stretch",attributes:new Map([["a_position",0],["a_texcoord",1]])},hillshade:{vsPath:"raster/hillshade",fsPath:"raster/hillshade",attributes:new Map([["a_position",0],["a_texcoord",1]])}},this._rendererUniformInfos=new Map}dispose(){this._quad&&this._quad.dispose()}prepareState({context:a},u){a.setBlendingEnabled(!0),a.setBlendFunctionSeparate(1,771,1,771),a.setColorMask(!0,!0,!0,!0),a.setStencilWriteMask(0),a.setStencilTestEnabled(!0),a.setStencilFunction(514,u.stencilRef,255)}draw(a,u){var c;if(!(0,fe.qE)(u)||u.suspended)return;a.timeline.begin(this.name);const P=!(null!=(c=a.context.capabilities.textureFloat)&&c.textureFloatLinear);u.updateTexture(a);const _=this.getShaderVariations(u,P),g=a.painter.materialManager.getProgram(a,this._desc[u.symbolizerParameters.type],_);this.drawWithProgram(a.context,g,u),a.timeline.end(this.name)}drawWithProgram(a,u,c,P=1,_=[0,0],g=!1){this._quad||(this._quad=new F.Z(a,[0,0,1,0,0,1,1,1]));const{symbolizerParameters:p,transformGrid:B,width:x,height:N,opacity:E}=c,m=p.type;a.useProgram(u);const R=this.getShaderVariations(c),J=this.getUniformInfos(m,a,u,R),{names:ge,textures:oe}=c.getTextures();(0,Ee.RA)(a,u,ge,oe);const _e=(0,Ee.zS)(P,_),he=(0,Ee.Tc)(B,[x,N],[c.source.width,c.source.height],E,g);if((0,Ee.N9)(u,J,Ge(Ge({u_coordScale:c.coordScale,u_dvsMat3:c.transforms.dvs},_e),he)),p.colormap){const{colormap:re,colormapOffset:pe}=p,X=(0,Ee.Ue)(re,pe);(0,Ee.N9)(u,J,X)}if("stretch"===p.type){const re=(0,Ee.xW)(p);(0,Ee.N9)(u,J,re)}else if("hillshade"===p.type){const re=(0,Ee.Fm)(p);(0,Ee.N9)(u,J,re)}this._quad.draw()}getUniformInfos(a,u,c,P){const _=P.length>0?a+"-"+P.join("-"):a;if(this._rendererUniformInfos.has(_))return this._rendererUniformInfos.get(_);const g=(0,Ee.v)(u,c);return this._rendererUniformInfos.set(_,g),g}getShaderVariations(a,u=!1){const c=[],{interpolation:P}=a,{type:_,colormap:g}=a.symbolizerParameters;return"cubic"===P?c.push("bicubic"):"bilinear"===P&&"stretch"===_&&null!=g?(c.push("bilinear"),c.push("nnedge")):u&&"bilinear"===P&&c.push("bilinear"),a.isRendereredSource?c.push("noop"):g&&c.push("applyColormap"),a.transformGrid&&c.push("applyProjection"),c}},rasterVF:Ke.Z,tileInfo:T.Z,vtlBackground:class extends w.Z{constructor(){super(...arguments),this._color=(0,z.f)(1,0,0,1),this._patternMatrix=(0,C.c)(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(a,u){const{context:c,painter:P,styleLayerUID:_}=a;this._loadWGLResources(a);const g=a.displayLevel,p=a.styleLayer,B=p.backgroundMaterial,x=P.vectorTilesMaterialManager,N=p.getPaintValue("background-color",g),E=p.getPaintValue("background-opacity",g),m=p.getPaintValue("background-pattern",g),R=void 0!==m,J=N[3]*E,ge=1|window.devicePixelRatio,oe=a.spriteMosaic;let _e,he;const re=ge>I.a?2:1,pe=a.drawPhase===ue.jx.HITTEST,X=this._programOptions;X.id=pe,X.pattern=R;const G=x.getMaterialProgram(c,B,X);if(c.bindVAO(this._vao),c.useProgram(G),R){const W=oe.getMosaicItemPosition(m,!0);if((0,S.pC)(W)){const{tl:se,br:K,page:ve}=W;_e=K[0]-se[0],he=K[1]-se[1];const le=oe.getPageSize(ve);(0,S.pC)(le)&&(oe.bind(c,9729,ve,I.V4),G.setUniform4f("u_tlbr",se[0],se[1],K[0],K[1]),G.setUniform2fv("u_mosaicSize",le),G.setUniform1i("u_texture",I.V4))}G.setUniform1f("u_opacity",E)}else this._color[0]=J*N[0],this._color[1]=J*N[1],this._color[2]=J*N[2],this._color[3]=J,G.setUniform4fv("u_color",this._color);if(G.setUniform1f("u_depth",p.z||0),pe){const W=(0,h.Au)(_+1);G.setUniform4fv("u_id",W)}for(const W of u){if(G.setUniform1f("u_coord_range",W.rangeX),G.setUniformMatrix3fv("u_dvsMat3",W.transforms.dvs),R){const se=Math.max(Re(2,Math.round(g)-W.key.level),1),K=re*W.width*se,ve=K/(0,f.fp)(_e),le=K/(0,f.fp)(he);this._patternMatrix[0]=ve,this._patternMatrix[4]=le,G.setUniformMatrix3fv("u_pattern_matrix",this._patternMatrix)}c.setStencilFunction(514,W.stencilRef,255),c.drawArrays(5,0,4)}}_loadWGLResources(a){if(this._vao)return;const{context:u,styleLayer:c}=a,P=c.backgroundMaterial,_=new Int8Array([0,0,1,0,0,1,1,1]),g=D.Z.createVertex(u,35044,_),p=new Ae.Z(u,P.getAttributeLocations(),P.getLayoutInfo(),{geometry:g});this._vao=p}},vtlFill:class extends w.Z{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(a,u){const{displayLevel:c,drawPhase:P,renderPass:_,spriteMosaic:g,styleLayerUID:p}=a;let B=!1;for(const X of u)if(X.layerData.has(p)){const G=X.layerData.get(p);if(G.fillIndexCount>0||G.outlineIndexCount>0){B=!0;break}}if(!B)return;const x=a.styleLayer,N=x.getPaintProperty("fill-pattern"),E=void 0!==N,m=E&&N.isDataDriven;let R;if(E&&!m){const X=N.getValue(c);R=g.getMosaicItemPosition(X,!0)}const J=!E&&x.getPaintValue("fill-antialias",c);let _e,ge=!0,oe=1;if(!E){const X=x.getPaintProperty("fill-color"),G=x.getPaintProperty("fill-opacity");if(!(null!=X&&X.isDataDriven||null!=G&&G.isDataDriven)){const W=x.getPaintValue("fill-color",c);oe=x.getPaintValue("fill-opacity",c)*W[3],oe>=1&&(ge=!1)}}if(ge&&"opaque"===_)return;P===ue.jx.HITTEST&&(_e=(0,h.Au)(p+1));const he=x.getPaintValue("fill-translate",c),re=x.getPaintValue("fill-translate-anchor",c);(ge||"translucent"!==_)&&this._drawFill(a,p,x,u,he,re,E,R,m,_e),J&&"opaque"!==_&&!(!x.hasDataDrivenOutlineColor&&x.outlineUsesFillColor&&oe<1)&&this._drawOutline(a,p,x,u,he,re,_e)}_drawFill(a,u,c,P,_,g,p,B,x,N){if(p&&!x&&(0,S.Wi)(B))return;const{context:E,displayLevel:m,state:R,drawPhase:J,painter:ge,pixelRatio:oe,spriteMosaic:_e}=a,he=c.fillMaterial,re=ge.vectorTilesMaterialManager,pe=oe>I.a?2:1,X=J===ue.jx.HITTEST,G=this._fillProgramOptions;G.id=X,G.pattern=p;const W=re.getMaterialProgram(E,he,G);if(E.useProgram(W),(0,S.pC)(B)){const{page:K}=B,ve=_e.getPageSize(K);(0,S.pC)(ve)&&(_e.bind(E,9729,K,I.V4),W.setUniform2fv("u_mosaicSize",ve),W.setUniform1i("u_texture",I.V4))}W.setUniformMatrix3fv("u_displayMat3",1===g?R.displayMat3:R.displayViewMat3),W.setUniform2fv("u_fillTranslation",_),W.setUniform1f("u_depth",c.z+L),X&&W.setUniform4fv("u_id",N);let se=-1;for(const K of P){if(!K.layerData.has(u))continue;K.key.level!==se&&(se=K.key.level,he.setDataUniforms(W,m,c,se,_e));const ve=K.layerData.get(u);if(!ve.fillIndexCount)continue;ve.prepareForRendering(E);const le=ve.fillVertexArrayObject;if(!(0,S.Wi)(le)){if(E.bindVAO(le),W.setUniformMatrix3fv("u_dvsMat3",K.transforms.dvs),E.setStencilFunction(514,K.stencilRef,255),p){const Oe=Math.max(Re(2,Math.round(m)-K.key.level),1);W.setUniform1f("u_patternFactor",K.rangeX/(pe*K.width*Oe))}if(x){const Oe=ve.patternMap;if(!Oe)continue;for(const[Se,Le]of Oe){const Fe=_e.getPageSize(Se);(0,S.pC)(Fe)&&(_e.bind(E,9729,Se,I.V4),W.setUniform2fv("u_mosaicSize",Fe),W.setUniform1i("u_texture",I.V4),E.drawElements(4,Le[1],5125,Uint32Array.BYTES_PER_ELEMENT*Le[0]))}}else E.drawElements(4,ve.fillIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*ve.fillIndexStart);K.triangleCount+=ve.fillIndexCount/3}}}_drawOutline(a,u,c,P,_,g,p){const{context:B,displayLevel:x,state:N,drawPhase:E,painter:m,pixelRatio:R,spriteMosaic:J}=a,ge=c.outlineMaterial,oe=m.vectorTilesMaterialManager,_e=.75/R,he=E===ue.jx.HITTEST,re=this._outlineProgramOptions;re.id=he;const pe=oe.getMaterialProgram(B,ge,re);B.useProgram(pe),pe.setUniformMatrix3fv("u_displayMat3",1===g?N.displayMat3:N.displayViewMat3),pe.setUniform2fv("u_fillTranslation",_),pe.setUniform1f("u_depth",c.z+L),pe.setUniform1f("u_outline_width",_e),he&&pe.setUniform4fv("u_id",p);let X=-1;for(const G of P){if(!G.layerData.has(u))continue;G.key.level!==X&&(X=G.key.level,ge.setDataUniforms(pe,x,c,X,J));const W=G.layerData.get(u);if(W.prepareForRendering(B),!W.outlineIndexCount)continue;const se=W.outlineVertexArrayObject;(0,S.Wi)(se)||(B.bindVAO(se),pe.setUniformMatrix3fv("u_dvsMat3",G.transforms.dvs),B.setStencilFunction(514,G.stencilRef,255),B.drawElements(4,W.outlineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*W.outlineIndexStart),G.triangleCount+=W.outlineIndexCount/3)}}},vtlLine:class extends w.Z{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(a,u){const{context:c,displayLevel:P,state:_,drawPhase:g,painter:p,pixelRatio:B,spriteMosaic:x,styleLayerUID:N}=a;if(!u.some(le=>{var Oe,Se;return null!=(Oe=null==(Se=le.layerData.get(N))?void 0:Se.lineIndexCount)&&Oe}))return;const E=a.styleLayer,m=E.lineMaterial,R=p.vectorTilesMaterialManager,J=E.getPaintValue("line-translate",P),ge=E.getPaintValue("line-translate-anchor",P),oe=E.getPaintProperty("line-pattern"),_e=void 0!==oe,he=_e&&oe.isDataDriven;let re,pe;if(_e&&!he){const le=oe.getValue(P);re=x.getMosaicItemPosition(le)}let X=!1;if(!_e){const le=E.getPaintProperty("line-dasharray");if(pe=void 0!==le,X=pe&&le.isDataDriven,pe&&!X){const Oe=le.getValue(P),Se=E.getDashKey(Oe,E.getLayoutValue("line-cap",P));re=x.getMosaicItemPosition(Se)}}const G=1/B,W=g===ue.jx.HITTEST,se=this._programOptions;se.id=W,se.pattern=_e,se.sdf=pe;const K=R.getMaterialProgram(c,m,se);if(c.useProgram(K),K.setUniformMatrix3fv("u_displayViewMat3",_.displayViewMat3),K.setUniformMatrix3fv("u_displayMat3",1===ge?_.displayMat3:_.displayViewMat3),K.setUniform2fv("u_lineTranslation",J),K.setUniform1f("u_depth",E.z),K.setUniform1f("u_antialiasing",G),W){const le=(0,h.Au)(N+1);K.setUniform4fv("u_id",le)}if(re&&(0,S.pC)(re)){const{page:le}=re,Oe=x.getPageSize(le);(0,S.pC)(Oe)&&(x.bind(c,9729,le,I.V4),K.setUniform2fv("u_mosaicSize",Oe),K.setUniform1i("u_texture",I.V4))}let ve=-1;for(const le of u){if(!le.layerData.has(N))continue;le.key.level!==ve&&(ve=le.key.level,m.setDataUniforms(K,P,E,ve,x));const Oe=Re(2,P-ve)/B;K.setUniform1f("u_zoomFactor",Oe);const Se=le.layerData.get(N);if(!Se.lineIndexCount)continue;Se.prepareForRendering(c);const Le=Se.lineVertexArrayObject;if(!(0,S.Wi)(Le)){if(c.bindVAO(Le),K.setUniformMatrix3fv("u_dvsMat3",le.transforms.dvs),c.setStencilFunction(514,le.stencilRef,255),he||X){const Fe=Se.patternMap;if(!Fe)continue;for(const[Ne,Pe]of Fe){const Be=x.getPageSize(Ne);(0,S.pC)(Be)&&(x.bind(c,9729,Ne,I.V4),K.setUniform2fv("u_mosaicSize",Be),K.setUniform1i("u_texture",I.V4),c.drawElements(4,Pe[1],5125,Uint32Array.BYTES_PER_ELEMENT*Pe[0]))}}else c.drawElements(4,Se.lineIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*Se.lineIndexStart);le.triangleCount+=Se.lineIndexCount/3}}}},vtlCircle:class extends w.Z{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(a,u){const{context:c,displayLevel:P,requiredLevel:_,state:g,drawPhase:p,painter:B,spriteMosaic:x,styleLayerUID:N}=a;if(!u.some(X=>{var G,W;return null!=(G=null==(W=X.layerData.get(N))?void 0:W.circleIndexCount)&&G}))return;const E=a.styleLayer,m=E.circleMaterial,R=B.vectorTilesMaterialManager,ge=E.getPaintValue("circle-translate",P),oe=E.getPaintValue("circle-translate-anchor",P),_e=p===ue.jx.HITTEST,he=this._programOptions;he.id=_e;const re=R.getMaterialProgram(c,m,he);c.useProgram(re),re.setUniformMatrix3fv("u_displayMat3",1===oe?g.displayMat3:g.displayViewMat3),re.setUniform2fv("u_circleTranslation",ge),re.setUniform1f("u_depth",E.z),re.setUniform1f("u_antialiasingWidth",1.2);let pe=-1;if(_e){const X=(0,h.Au)(N+1);re.setUniform4fv("u_id",X)}for(const X of u){if(!X.layerData.has(N))continue;X.key.level!==pe&&(pe=X.key.level,m.setDataUniforms(re,P,E,pe,x));const G=X.layerData.get(N);if(!G.circleIndexCount)continue;G.prepareForRendering(c);const W=G.circleVertexArrayObject;(0,S.Wi)(W)||(c.bindVAO(W),re.setUniformMatrix3fv("u_dvsMat3",X.transforms.dvs),_!==X.key.level?c.setStencilFunction(514,X.stencilRef,255):c.setStencilFunction(516,255,255),c.drawElements(4,G.circleIndexCount,5125,Uint32Array.BYTES_PER_ELEMENT*G.circleIndexStart),X.triangleCount+=G.circleIndexCount/3)}}},vtlSymbol:class extends w.Z{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=(0,be.c)()}dispose(){}drawMany(a,u){const{drawPhase:c,styleLayerUID:P}=a,_=a.styleLayer;let g;c===ue.jx.HITTEST&&(g=(0,h.Au)(P+1)),this._drawIcons(a,_,u,g),this._drawText(a,_,u,g)}_drawIcons(a,u,c,P){const{context:_,displayLevel:g,drawPhase:p,painter:B,spriteMosaic:x,state:N,styleLayerUID:E}=a,m=u.iconMaterial,R=B.vectorTilesMaterialManager;let J,ge=!1;for(const ve of c)if(ve.layerData.has(E)&&(J=ve.layerData.get(E),J.iconPerPageElementsMap.size>0)){ge=!0;break}if(!ge)return;const oe=u.getPaintValue("icon-translate",g),_e=u.getPaintValue("icon-translate-anchor",g);let he=u.getLayoutValue("icon-rotation-alignment",g);2===he&&(he=0===u.getLayoutValue("symbol-placement",g)?1:0);const re=0===he,pe=u.getLayoutValue("icon-keep-upright",g)&&re,X=J.isIconSDF,G=p===ue.jx.HITTEST,W=this._iconProgramOptions;W.id=G,W.sdf=X;const se=R.getMaterialProgram(_,m,W);_.useProgram(se),se.setUniformMatrix3fv("u_displayViewMat3",0===he?N.displayViewMat3:N.displayMat3),se.setUniformMatrix3fv("u_displayMat3",1===_e?N.displayMat3:N.displayViewMat3),se.setUniform2fv("u_iconTranslation",oe),se.setUniform1f("u_depth",u.z),se.setUniform1f("u_mapRotation",(0,De.s5)(N.rotation)),se.setUniform1f("u_keepUpright",pe?1:0),se.setUniform1f("u_level",10*g),se.setUniform1i("u_texture",I.V4),se.setUniform1f("u_fadeDuration",Ce.nN/1e3),G&&se.setUniform4fv("u_id",P);let K=-1;for(const ve of c){if(!ve.layerData.has(E)||(ve.key.level!==K&&(K=ve.key.level,m.setDataUniforms(se,g,u,K,x)),J=ve.layerData.get(E),0===J.iconPerPageElementsMap.size))continue;J.prepareForRendering(_),J.updateOpacityInfo();const le=J.iconVertexArrayObject;if(!(0,S.Wi)(le)){_.bindVAO(le),se.setUniformMatrix3fv("u_dvsMat3",ve.transforms.dvs),se.setUniform1f("u_time",(performance.now()-J.lastOpacityUpdate)/1e3);for(const[Oe,Se]of J.iconPerPageElementsMap)this._renderIconRange(a,se,Se,Oe,ve)}}}_renderIconRange(a,u,c,P,_){const{context:g,spriteMosaic:p}=a;this._spritesTextureSize[0]=p.getWidth(P)/4,this._spritesTextureSize[1]=p.getHeight(P)/4,u.setUniform2fv("u_mosaicSize",this._spritesTextureSize),p.bind(g,9729,P,I.V4),g.setStencilTestEnabled(!0),g.setStencilFunction(516,255,255),g.setStencilWriteMask(0),g.drawElements(4,c[1],5125,Uint32Array.BYTES_PER_ELEMENT*c[0]),_.triangleCount+=c[1]/3}_drawText(a,u,c,P){const{context:_,displayLevel:g,drawPhase:p,glyphMosaic:B,painter:x,pixelRatio:N,spriteMosaic:E,state:m,styleLayerUID:R}=a,J=u.textMaterial,ge=x.vectorTilesMaterialManager;let oe,_e=!1;for(const we of c)if(we.layerData.has(R)&&(oe=we.layerData.get(R),oe.glyphPerPageElementsMap.size>0)){_e=!0;break}if(!_e)return;const he=u.getPaintProperty("text-opacity");if(he&&!he.isDataDriven&&0===he.getValue(g))return;const re=u.getPaintProperty("text-color"),pe=!re||re.isDataDriven||re.getValue(g)[3]>0,X=u.getPaintProperty("text-halo-width"),G=u.getPaintProperty("text-halo-color"),W=(!X||X.isDataDriven||X.getValue(g)>0)&&(!G||G.isDataDriven||G.getValue(g)[3]>0);if(!pe&&!W)return;let K=u.getLayoutValue("text-rotation-alignment",g);2===K&&(K=0===u.getLayoutValue("symbol-placement",g)?1:0);const ve=0===K,le=u.getLayoutValue("text-keep-upright",g)&&ve,Oe=p===ue.jx.HITTEST,Se=.8*3/N;this._glyphTextureSize||(this._glyphTextureSize=(0,be.f)(B.width/4,B.height/4));const Le=u.getPaintValue("text-translate",g),Fe=u.getPaintValue("text-translate-anchor",g),Ne=this._sdfProgramOptions;Ne.id=Oe;const Pe=ge.getMaterialProgram(_,J,Ne);_.useProgram(Pe),Pe.setUniformMatrix3fv("u_displayViewMat3",0===K?m.displayViewMat3:m.displayMat3),Pe.setUniformMatrix3fv("u_displayMat3",1===Fe?m.displayMat3:m.displayViewMat3),Pe.setUniform2fv("u_textTranslation",Le),Pe.setUniform1f("u_depth",u.z+152587890625e-16),Pe.setUniform2fv("u_mosaicSize",this._glyphTextureSize),Pe.setUniform1f("u_mapRotation",(0,De.s5)(m.rotation)),Pe.setUniform1f("u_keepUpright",le?1:0),Pe.setUniform1f("u_level",10*g),Pe.setUniform1i("u_texture",I.CU),Pe.setUniform1f("u_antialiasingWidth",Se),Pe.setUniform1f("u_fadeDuration",Ce.nN/1e3),Oe&&Pe.setUniform4fv("u_id",P);let Be=-1;for(const we of c){if(!we.layerData.has(R)||(we.key.level!==Be&&(Be=we.key.level,J.setDataUniforms(Pe,g,u,Be,E)),oe=we.layerData.get(R),0===oe.glyphPerPageElementsMap.size))continue;oe.prepareForRendering(_),oe.updateOpacityInfo();const We=oe.textVertexArrayObject;if((0,S.Wi)(We))continue;_.bindVAO(We),Pe.setUniformMatrix3fv("u_dvsMat3",we.transforms.dvs),_.setStencilTestEnabled(!0),_.setStencilFunction(516,255,255),_.setStencilWriteMask(0);const Xe=(performance.now()-oe.lastOpacityUpdate)/1e3;Pe.setUniform1f("u_time",Xe),oe.glyphPerPageElementsMap.forEach((Je,$e)=>{this._renderGlyphRange(_,Je,$e,B,Pe,W,pe,we)})}}_renderGlyphRange(a,u,c,P,_,g,p,B){P.bind(a,9729,c,I.CU),g&&(_.setUniform1f("u_halo",1),a.drawElements(4,u[1],5125,Uint32Array.BYTES_PER_ELEMENT*u[0]),B.triangleCount+=u[1]/3),p&&(_.setUniform1f("u_halo",0),a.drawElements(4,u[1],5125,Uint32Array.BYTES_PER_ELEMENT*u[0]),B.triangleCount+=u[1]/3)}}}},18159:(ye,j,s)=>{s.d(j,{PF:()=>F,Ts:()=>w,Bf:()=>I,nN:()=>$});const I=!0,F=32,w=1.5,$=200},42367:(ye,j,s)=>{s.d(j,{vX:()=>D,s5:()=>T,k3:()=>A,Or:()=>b});const Q=128/Math.PI,ae=1/Math.LN2;function de(O,M){return(O%=M)>=0?O:O+M}function b(O){return de(O*Q,256)}function T(O){return de(.7111111111111111*O,256)}function A(O){return Math.log(O)*ae}function D(O,M,V){return O>=M&&O<=V||O>=V&&O<=M}},10269:(ye,j,s)=>{s.d(j,{Z:()=>k});var I=s(26436),H=(s(27001),s(67474),s(36320),s(40150),s(94345),s(82705),s(13006),s(48082));class k{constructor(de,b){this.rctx=de,this._vertexBuffer=I.Z.createVertex(de,35044,new Uint16Array(b)),this._vao=new H.Z(de,new Map([["a_position",0]]),{geometry:[{name:"a_position",count:2,type:5122,offset:0,stride:4,normalized:!1}]},{geometry:this._vertexBuffer}),this._count=b.length/2}bind(){this._vao.bind()}unbind(){this._vao.unbind()}dispose(){this._vao.dispose(!1),this._vertexBuffer.dispose()}draw(){this.rctx.bindVAO(this._vao),this.rctx.drawArrays(5,0,this._count)}}},91099:(ye,j,s)=>{s.d(j,{Z:()=>Ae}),s(67474);var F=s(60305),w=s(61274),$=s(56109),Q=s(29729),ne=s(22795),S=s(33870),z=s(66505),H=s(43588),k=s(87492),ae=s(64298),de=s(90097),b=s(82490),T=s(1452),A=s(26436);const f=S.Z.getLogger("esri.views.2d.engine.webgl.Mesh2D"),D=(ue,h,y,Y)=>{let L=0;for(let q=1;q<y;q++)L+=(ue[2*(h+q)]-ue[2*(h+q-1)])*(ue[2*(h+q)+1]+ue[2*(h+q-1)+1]);return Y?L>0:L<0},O=({coords:ue,lengths:h},y)=>{const Y=[];for(let L=0,q=0;L<h.length;q+=h[L],L+=1){const te=q,be=[];for(;L<h.length-1&&D(ue,q+h[L],h[L+1],y);L+=1,q+=h[L])be.push(q+h[L]-te);const Ce=ue.slice(2*te,2*(q+h[L])),De=(0,H.e)(Ce,be,2);for(const Ue of De)Y.push(Ue+te)}return Y};class M{constructor(h,y,Y,L=!1){this._cache={},this.vertices=h,this.indices=y,this.primitiveType=Y,this.isMapSpace=L}static fromRect({x:h,y,width:Y,height:L}){return M.fromScreenExtent({xmin:h,ymin:y,xmax:h+Y,ymax:y+L})}static fromPath(h){const y=(0,de.ks)(new b.Z,h.path,!1,!1),Y=y.coords,L=new Uint32Array(O(y,!0)),q=new Uint32Array(Y.length/2);for(let te=0;te<q.length;te++)q[te]=(0,T.UJ)(Math.floor(Y[2*te]),Math.floor(Y[2*te+1]));return new M({geometry:q},L,4)}static fromGeometry(h,y){const Y=y.geometry.type;switch(Y){case"polygon":return M.fromPolygon(h,y.geometry);case"extent":return M.fromMapExtent(h,y.geometry);default:return f.error(new ne.Z("mapview-bad-type",`Unable to create a mesh from type ${Y}`,y)),M.fromRect({x:0,y:0,width:1,height:1})}}static fromPolygon(h,y){const Y=(0,de.Uy)(new b.Z,y,!1,!1),L=Y.coords,q=new Uint32Array(O(Y,!1)),te=new Uint32Array(L.length/2),be=(0,ae.a)(),Ce=(0,ae.a)();for(let De=0;De<te.length;De++)(0,k.s)(be,L[2*De],L[2*De+1]),h.toScreen(Ce,be),te[De]=(0,T.UJ)(Math.floor(Ce[0]),Math.floor(Ce[1]));return new M({geometry:te},q,4,!0)}static fromScreenExtent({xmin:h,xmax:y,ymin:Y,ymax:L}){const q={geometry:new Uint32Array([(0,T.UJ)(h,Y),(0,T.UJ)(y,Y),(0,T.UJ)(h,L),(0,T.UJ)(h,L),(0,T.UJ)(y,Y),(0,T.UJ)(y,L)])},te=new Uint32Array([0,1,2,3,4,5]);return new M(q,te,4)}static fromMapExtent(h,y){const[Y,L]=h.toScreen([0,0],[y.xmin,y.ymin]),[q,te]=h.toScreen([0,0],[y.xmax,y.ymax]),be={geometry:new Uint32Array([(0,T.UJ)(Y,L),(0,T.UJ)(q,L),(0,T.UJ)(Y,te),(0,T.UJ)(Y,te),(0,T.UJ)(q,L),(0,T.UJ)(q,te)])},Ce=new Uint32Array([0,1,2,3,4,5]);return new M(be,Ce,4)}destroy(){(0,F.pC)(this._cache.indexBuffer)&&this._cache.indexBuffer.dispose();for(const h in this._cache.vertexBuffers)(0,F.pC)(this._cache.vertexBuffers[h])&&this._cache.vertexBuffers[h].dispose()}get elementType(){return(ue=>{switch(this.indices.BYTES_PER_ELEMENT){case 1:return 5121;case 2:return 5123;case 4:return 5125;default:throw new ne.Z("Cannot get DataType of array")}})()}getIndexBuffer(h,y=35044){return this._cache.indexBuffer||(this._cache.indexBuffer=A.Z.createIndex(h,y,this.indices)),this._cache.indexBuffer}getVertexBuffers(h,y=35044){return this._cache.vertexBuffers||(this._cache.vertexBuffers=Object.keys(this.vertices).reduce((Y,L)=>He(Ge({},Y),{[L]:A.Z.createVertex(h,y,this.vertices[L])}),{})),this._cache.vertexBuffers}}var V=s(48082);const ee=S.Z.getLogger("esri.views.2d.engine.webgl.ClippingInfo"),ie=ue=>parseFloat(ue)/100;class Ie extends z.s{constructor(h,y){super(),this._clip=y,this._cache={},this.stage=h,this._handle=y.watch("version",()=>this._invalidate()),this.ready()}static fromClipArea(h,y){return new Ie(h,y)}_destroyGL(){(0,F.pC)(this._cache.mesh)&&(this._cache.mesh.destroy(),this._cache.mesh=null),(0,F.pC)(this._cache.vao)&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(h,y,Y,L){const[q,te]=y.size;if("geometry"!==this._clip.type&&this._lastWidth===q&&this._lastHeight===te||(this._lastWidth=q,this._lastHeight=te,this._destroyGL()),(0,F.Wi)(this._cache.vao)){const be=this._createMesh(y,this._clip),Ce=be.getIndexBuffer(h),De=be.getVertexBuffers(h);this._cache.mesh=be,this._cache.vao=new V.Z(h,Y,L,De,Ce)}return this._cache.vao}_createTransforms(){return{dvs:(0,w.c)()}}_invalidate(){this._destroyGL(),this.requestRender()}_createScreenRect(h,y){const[Y,L]=h.size,q="string"==typeof y.left?ie(y.left)*Y:y.left,te="string"==typeof y.right?ie(y.right)*Y:y.right,be="string"==typeof y.top?ie(y.top)*L:y.top,Ce="string"==typeof y.bottom?ie(y.bottom)*L:y.bottom,Ue=be;return{x:q,y:Ue,width:Math.max(Y-te-q,0),height:Math.max(L-Ce-Ue,0)}}_createMesh(h,y){switch(y.type){case"rect":return M.fromRect(this._createScreenRect(h,y));case"path":return M.fromPath(y);case"geometry":return M.fromGeometry(h,y);default:return ee.error(new ne.Z("mapview-bad-type","Unable to create ClippingInfo mesh from clip of type: ${clip.type}")),M.fromRect({x:0,y:0,width:1,height:1})}}}var Z=s(38963);class Ae extends Q.W{constructor(){super(...arguments),this.name=this.constructor.name}set clips(h){this._clips=h,this.children.forEach(y=>y.clips=h),this._updateClippingInfo()}_createTransforms(){return{dvs:(0,w.c)()}}doRender(h){const y=this.createRenderParams(h),{painter:Y,globalOpacity:L,profiler:q,drawPhase:te}=y,be=te===Z.jx.LABEL?1:L*this.computedOpacity;q.recordContainerStart(this.name),Y.beforeRenderLayer(y,this._clippingInfos?255:0,be),this.updateTransforms(h.state),this.renderChildren(y),Y.compositeLayer(y,be),q.recordContainerEnd()}renderChildren(h){(0,F.Wi)(this._renderPasses)&&(this._renderPasses=this.prepareRenderPasses(h.painter));for(const y of this.children)y.beforeRender(h);for(const y of this._renderPasses)try{y.render(h)}catch(Y){}for(const y of this.children)y.afterRender(h)}createRenderParams(h){return h.requireFBO=this.requiresDedicatedFBO,h}prepareRenderPasses(h){return[h.registerRenderPass({name:"clip",brushes:[$.U.clip],target:()=>this._clippingInfos,drawPhase:Z.jx.MAP|Z.jx.LABEL|Z.jx.LABEL_ALPHA|Z.jx.DEBUG|Z.jx.HIGHLIGHT})]}updateTransforms(h){for(const y of this.children)y.setTransform(h)}onAttach(){super.onAttach(),this._updateClippingInfo()}onDetach(){super.onDetach(),this._updateClippingInfo()}_updateClippingInfo(){if((0,F.pC)(this._clippingInfos)&&(this._clippingInfos.forEach(y=>y.destroy()),this._clippingInfos=null),!this.stage)return;const h=this._clips;(0,F.pC)(h)&&h.length&&(this._clippingInfos=h.items.map(y=>Ie.fromClipArea(this.stage,y))),this.requestRender()}}},19202:(ye,j,s)=>{s.d(j,{Z:()=>I});class I{constructor(){this.name=this.constructor.name||"UnnamedBrush"}prepareState(w,$,Q){}draw(w,$,Q){}drawMany(w,$,Q){for(const ne of $)this.draw(w,ne,Q)}}},86932:(ye,j,s)=>{s.d(j,{Z:()=>D});var I=s(69096),F=s(26436),z=(s(27001),s(67474),s(36320),s(40150),s(94345),s(91522)),k=(s(82705),s(13006)),ae=s(48082),de=s(19202),b=s(19804),T=s(61457);const A={shaders:{vertexShader:(0,T.w)("tileInfo/tileInfo.vert"),fragmentShader:(0,T.w)("tileInfo/tileInfo.frag")},attributes:new Map([["a_pos",0]])};class D extends de.Z{constructor(){super(...arguments),this._color=(0,I.f)(1,0,0,1)}dispose(){this._outlineProgram&&(this._outlineProgram.dispose(),this._outlineProgram=null),this._tileInfoProgram&&(this._tileInfoProgram.dispose(),this._tileInfoProgram=null),this._outlineVertexArrayObject&&(this._outlineVertexArrayObject.dispose(),this._outlineVertexArrayObject=null),this._tileInfoVertexArrayObject&&(this._tileInfoVertexArrayObject.dispose(),this._tileInfoVertexArrayObject=null),this._canvas=null}prepareState({context:M}){M.setBlendingEnabled(!0),M.setBlendFunctionSeparate(1,771,1,771),M.setColorMask(!0,!0,!0,!0),M.setStencilWriteMask(0),M.setStencilTestEnabled(!1)}draw(M,V){const{context:ee}=M;if(!V.isReady)return;this._loadWGLResources(ee),ee.bindVAO(this._outlineVertexArrayObject),ee.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv("u_dvsMat3",V.transforms.dvs),this._outlineProgram.setUniform2f("u_coord_range",V.rangeX,V.rangeY),this._outlineProgram.setUniform1f("u_depth",0),this._outlineProgram.setUniform4fv("u_color",this._color),ee.drawArrays(3,0,4),ee.bindVAO();const ie=this._getTexture(ee,V);ie&&(ee.bindVAO(this._tileInfoVertexArrayObject),ee.useProgram(this._tileInfoProgram),ee.bindTexture(ie,0),this._tileInfoProgram.setUniformMatrix3fv("u_dvsMat3",V.transforms.dvs),this._tileInfoProgram.setUniform1f("u_depth",0),this._tileInfoProgram.setUniform2f("u_coord_ratio",V.rangeX/V.width,V.rangeY/V.height),this._tileInfoProgram.setUniform2f("u_delta",8,8),this._tileInfoProgram.setUniform2f("u_dimensions",ie.descriptor.width,ie.descriptor.height),ee.drawArrays(5,0,4),ee.bindVAO())}_loadWGLResources(M){if(this._outlineProgram&&this._tileInfoProgram)return;const V=(0,z.H)(M,b.O),ee=(0,z.H)(M,A),ie={geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},Ie=new Int8Array([0,0,1,0,1,1,0,1]),Z=F.Z.createVertex(M,35044,Ie),Ae=new ae.Z(M,b.O.attributes,ie,{geometry:Z}),ue=new Int8Array([0,0,1,0,0,1,1,1]),h=F.Z.createVertex(M,35044,ue),y=new ae.Z(M,A.attributes,ie,{geometry:h});this._outlineProgram=V,this._tileInfoProgram=ee,this._outlineVertexArrayObject=Ae,this._tileInfoVertexArrayObject=y}_getTexture(M,V){if(V.texture&&V.triangleCountReportedInDebug===V.triangleCount)return V.texture;V.triangleCountReportedInDebug=V.triangleCount,this._canvas||(this._canvas=document.createElement("canvas"),this._canvas.setAttribute("id","canvas2d"),this._canvas.setAttribute("width","300"),this._canvas.setAttribute("height","32"),this._canvas.setAttribute("style","display:none"));const ee=V.triangleCount;let ie=V.key.id;V.triangleCount>0&&(ie+=`, ${ee}`);const Ie=this._canvas,Z=Ie.getContext("2d");return Z.font="24px sans-serif",Z.textAlign="left",Z.textBaseline="top",Z.clearRect(0,0,300,32),ee>1e5?(Z.fillStyle="red",Z.fillRect(0,0,300,32),Z.fillStyle="black"):(Z.clearRect(0,0,300,32),Z.fillStyle="blue"),Z.fillText(ie,0,0),V.texture=new k.Z(M,{target:3553,pixelFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071},Ie),V.texture}}},3953:(ye,j,s)=>{s.d(j,{Z:()=>T});var I=s(69096),F=s(26436),z=(s(27001),s(67474),s(36320),s(40150),s(94345),s(91522)),ae=(s(82705),s(13006),s(48082)),de=s(19202),b=s(19804);class T extends de.Z{constructor(){super(...arguments),this._color=(0,I.f)(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:f},C){f.setDepthWriteEnabled(!1),f.setDepthTestEnabled(!1),f.setStencilTestEnabled(!0),f.setBlendingEnabled(!1),f.setColorMask(!1,!1,!1,!1),f.setStencilOp(7680,7680,7681),f.setStencilWriteMask(255),f.setStencilFunctionSeparate(1032,516,C.stencilRef,255)}draw(f,C){const{context:D}=f;this._initialized||this._initialize(D),D.bindVAO(this._solidVertexArrayObject),D.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv("u_dvsMat3",C.transforms.dvs),this._solidProgram.setUniform2fv("u_coord_range",[C.rangeX,C.rangeY]),this._solidProgram.setUniform1f("u_depth",0),this._solidProgram.setUniform4fv("u_color",this._color),D.drawArrays(5,0,4),D.bindVAO()}_initialize(f){if(this._initialized)return!0;const C=(0,z.H)(f,b.O);if(!C)return!1;const O=new Int8Array([0,0,1,0,0,1,1,1]),M=F.Z.createVertex(f,35044,O),V=new ae.Z(f,b.O.attributes,{geometry:[{name:"a_pos",count:2,type:5120,offset:0,stride:2,normalized:!1,divisor:0}]},{geometry:M});return this._solidProgram=C,this._solidVertexArrayObject=V,this._initialized=!0,!0}}},40085:(ye,j,s)=>{s.d(j,{Z:()=>Q});var I=s(60305),F=s(19202);const w=new Float32Array([.27058823529411763,.4588235294117647,.7098039215686275,1,.396078431372549,.5372549019607843,.7215686274509804,1,.5176470588235295,.6196078431372549,.7294117647058823,1,.6352941176470588,.7058823529411765,.7411764705882353,1,.7529411764705882,.8,.7450980392156863,1,.8705882352941177,.8901960784313725,.7490196078431373,1,1,1,.7490196078431373,1,1,.8627450980392157,.6313725490196078,1,.9803921568627451,.7254901960784313,.5176470588235295,1,.9607843137254902,.596078431372549,.4117647058823529,1,.9294117647058824,.4588235294117647,.3176470588235294,1,.9098039215686274,.08235294117647059,.08235294117647059,1]),$={beaufort_ft:w,beaufort_m:w,beaufort_km:w,beaufort_mi:w,beaufort_kn:new Float32Array([.1568627450980392,.5725490196078431,.7803921568627451,1,.34901960784313724,.6352941176470588,.7294117647058823,1,.5058823529411764,.7019607843137254,.6705882352941176,1,.6274509803921569,.7607843137254902,.6078431372549019,1,.7490196078431373,.8313725490196079,.5411764705882353,1,.8549019607843137,.9019607843137255,.4666666666666667,1,.9803921568627451,.9803921568627451,.39215686274509803,1,.9882352941176471,.8352941176470589,.3254901960784314,1,.9882352941176471,.7019607843137254,.4,1,.9803921568627451,.5529411764705883,.20392156862745098,1,.9686274509803922,.43137254901960786,.16470588235294117,1,.9411764705882353,.2784313725490196,.11372549019607843,1]),classified_arrow:new Float32Array([.2196078431372549,.6588235294117647,0,1,.5450980392156862,1.2117647058823529,0,1,1,1,0,1,1,.5019607843137255,0,1,1,0,0,1]),ocean_current_m:new Float32Array([.3058823529411765,.10196078431372549,.6,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),ocean_current_kn:new Float32Array([0,0,0,1,0,.1450980392156863,.39215686274509803,1,.3058823529411765,.10196078431372549,.6,1,.592156862745098,0,.39215686274509803,1,.7019607843137254,.10588235294117647,.10196078431372549,1,.6941176470588235,.3058823529411765,.10196078431372549,1,.792156862745098,.5019607843137255,.10196078431372549,1,.6941176470588235,.7019607843137254,.20392156862745098,1,.6941176470588235,.6941176470588235,.6941176470588235,1]),single_arrow:new Float32Array([0,92/255,230/255,1]),wind_speed:new Float32Array([0,0,0,1])};class Q extends F.Z{constructor(){super(...arguments),this._desc={magdir:{vsPath:"raster/magdir",fsPath:"raster/magdir",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])},scalar:{vsPath:"raster/scalar",fsPath:"raster/scalar",attributes:new Map([["a_pos",0],["a_offset",1],["a_vv",2]])}}}dispose(){}prepareState({context:S},z){S.setBlendingEnabled(!0),S.setBlendFunctionSeparate(1,771,1,771),S.setColorMask(!0,!0,!0,!0),S.setStencilWriteMask(0),S.setStencilTestEnabled(!0),S.setStencilOp(7680,7680,7681),S.setStencilFunction(514,z.stencilRef,255)}draw(S,z){if((0,I.Wi)(z.source)||0===z.source.validPixelCount)return;const{timeline:H}=S;if(H.begin(this.name),z.updateVectorFieldVAO(S),"scalar"===S.renderPass){const k=z.vaoData.scalar;k&&this._drawScalars(S,z,k.vao,k.elementCount)}else{const k=z.vaoData.magdir;k&&this._drawTriangles(S,z,k.vao,k.elementCount)}H.end(this.name)}_drawTriangles(S,z,H,k){const{context:ae,painter:de}=S,{symbolizerParameters:b}=z,T=b.dataRange?["dataRange"]:[];"geographic"===b.rotationType&&T.push("rotationGeographic");const A=de.materialManager.getProgram(S,this._desc.magdir,T);ae.useProgram(A);const{coordScale:f,opacity:C,transforms:D}=z;A.setUniform2fv("u_coordScale",f),A.setUniform1f("u_opacity",C),A.setUniformMatrix3fv("u_dvsMat3",D.dvs);const{style:O,dataRange:M,rotation:V,symbolPercentRange:ee}=b;A.setUniform4fv("u_colors",$[O]||$.single_arrow),A.setUniform2fv("u_dataRange",M),A.setUniform1f("u_rotation",V),A.setUniform2fv("u_symbolPercentRange",ee);const ie=this._getSymbolSize(S,z);A.setUniform2fv("u_symbolSize",ie),ae.bindVAO(H),ae.drawElements(4,k,5125,0)}_drawScalars(S,z,H,k){const{context:ae,painter:de}=S,{symbolizerParameters:b}=z,T=[];"wind_speed"===b.style?T.push("innerCircle"):b.dataRange&&T.push("dataRange"),"geographic"===b.rotationType&&T.push("rotationGeographic");const A=de.materialManager.getProgram(S,this._desc.scalar,T);ae.useProgram(A);const{coordScale:f,opacity:C,transforms:D}=z;A.setUniform2fv("u_coordScale",f),A.setUniform1f("u_opacity",C),A.setUniformMatrix3fv("u_dvsMat3",D.dvs);const{dataRange:O,symbolPercentRange:M}=b;A.setUniform2fv("u_dataRange",O),A.setUniform2fv("u_symbolPercentRange",M);const V=this._getSymbolSize(S,z);A.setUniform2fv("u_symbolSize",V),ae.bindVAO(H),ae.drawElements(4,k,5125,0)}_getSymbolSize(S,z){const H=Re(2,S.displayLevel-z.key.level),{symbolTileSize:k}=z.symbolizerParameters;return[k/(Math.round((z.width-z.offset[0])/k)*k)/H,k/(Math.round((z.height-z.offset[1])/k)*k)/H]}}},19804:(ye,j,s)=>{s.d(j,{O:()=>F});var I=s(61457);const F={shaders:{vertexShader:(0,I.w)("background/background.vert"),fragmentShader:(0,I.w)("background/background.frag")},attributes:new Map([["a_pos",0]])}},61457:(ye,j,s)=>{s.d(j,{w:()=>T}),s(26436),s(27001),s(67474),s(36320),s(40150),s(94345),s(82705),s(13006);var H=s(42789),ae=(s(48082),{background:{"background.frag":"uniform lowp vec4 u_color;\nvoid main() {\ngl_FragColor = u_color;\n}","background.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump vec2 u_coord_range;\nuniform mediump float u_depth;\nvoid main() {\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\n}"},bitBlit:{"bitBlit.frag":"uniform lowp sampler2D u_tex;\nuniform lowp float u_opacity;\nvarying mediump vec2 v_uv;\nvoid main() {\nlowp vec4 color = texture2D(u_tex, v_uv);\ngl_FragColor = color *  u_opacity;\n}","bitBlit.vert":"attribute vec2 a_pos;\nattribute vec2 a_tex;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_pos, 0.0, 1.0);\nv_uv = a_tex;\n}"},blend:{"blend.frag":"precision mediump float;\nuniform sampler2D u_layerTexture;\nuniform lowp float u_opacity;\nuniform lowp float u_inFadeOpacity;\n#ifndef NORMAL\nuniform sampler2D u_backbufferTexture;\n#endif\nvarying mediump vec2 v_uv;\nfloat rgb2v(in vec3 c) {\nreturn max(c.x, max(c.y, c.z));\n}\nvec3 rgb2hsv(in vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(in vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 tint(in vec3 Cb, in vec3 Cs) {\nfloat vIn = rgb2v(Cb);\nvec3 hsvTint = rgb2hsv(Cs);\nvec3 hsvOut = vec3(hsvTint.x, hsvTint.y, vIn * hsvTint.z);\nreturn hsv2rgb(hsvOut);\n}\nfloat overlay(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (1.0 - 2.0 * (1.0 - Cs ) * (1.0 - Cb)) + step(0.5, Cs) * (2.0 * Cs * Cb);\n}\nfloat colorDodge(in float Cb, in float Cs) {\nreturn (Cb == 0.0) ? 0.0 : (Cs == 1.0) ? 1.0 : min(1.0, Cb / (1.0 - Cs));\n}\nfloat colorBurn(in float Cb, in float Cs) {\nreturn (Cb == 1.0) ? 1.0 : (Cs == 0.0) ? 0.0 : 1.0 - min(1.0, (1.0 - Cb) / Cs);\n}\nfloat hardLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * (2.0 * Cs * Cb) + step(0.5, Cs) * (1.0 - 2.0 * (1.0 - Cs) * (1.0 - Cb));\n}\nfloat reflectBlend(in float Cb, in float Cs) {\nreturn (Cs == 1.0) ? Cs : min(Cb * Cb / (1.0 - Cs), 1.0);\n}\nfloat softLight(in float Cb, in float Cs) {\nif (Cs <= 0.5) {\nreturn Cb - (1.0 - 2.0 * Cs) * Cb * (1.0 - Cb);\n}\nif (Cb <= 0.25) {\nreturn Cb + (2.0 * Cs - 1.0) * Cb * ((16.0 * Cb - 12.0) * Cb + 3.0);\n}\nreturn Cb + (2.0 * Cs - 1.0) * (sqrt(Cb) - Cb);\n}\nfloat vividLight(in float Cb, in float Cs) {\nreturn (1.0 - step(0.5, Cs)) * colorBurn(Cb, 2.0 * Cs) + step(0.5, Cs) * colorDodge(Cb, (2.0 * (Cs - 0.5)));\n}\nfloat minv3(in vec3 c) {\nreturn min(min(c.r, c.g), c.b);\n}\nfloat maxv3(in vec3 c) {\nreturn max(max(c.r, c.g), c.b);\n}\nfloat lumv3(in vec3 c) {\nreturn dot(c, vec3(0.3, 0.59, 0.11));\n}\nfloat satv3(vec3 c) {\nreturn maxv3(c) - minv3(c);\n}\nvec3 clipColor(vec3 color) {\nfloat lum = lumv3(color);\nfloat mincol = minv3(color);\nfloat maxcol = maxv3(color);\nif (mincol < 0.0) {\ncolor = lum + ((color - lum) * lum) / (lum - mincol);\n}\nif (maxcol > 1.0) {\ncolor = lum + ((color - lum) * (1.0 - lum)) / (maxcol - lum);\n}\nreturn color;\n}\nvec3 setLum(vec3 cbase, vec3 clum) {\nfloat lbase = lumv3(cbase);\nfloat llum = lumv3(clum);\nfloat ldiff = llum - lbase;\nvec3 color = cbase + vec3(ldiff);\nreturn clipColor(color);\n}\nvec3 setLumSat(vec3 cbase, vec3 csat, vec3 clum)\n{\nfloat minbase = minv3(cbase);\nfloat sbase = satv3(cbase);\nfloat ssat = satv3(csat);\nvec3 color;\nif (sbase > 0.0) {\ncolor = (cbase - minbase) * ssat / sbase;\n} else {\ncolor = vec3(0.0);\n}\nreturn setLum(color, clum);\n}\nvoid main() {\nvec4 src = texture2D(u_layerTexture, v_uv);\n#ifdef NORMAL\ngl_FragColor = src *  u_opacity;\n#else\nvec4 dst = texture2D(u_backbufferTexture, v_uv);\nvec3 Cs = src.a == 0.0 ? src.rgb : vec3(src.rgb / src.a);\nvec3 Cb = dst.a == 0.0 ? dst.rgb : vec3(dst.rgb / dst.a);\nfloat as = u_opacity * src.a;\nfloat ab = dst.a;\n#ifdef DESTINATION_OVER\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb, as + ab - as * ab);\n#endif\n#ifdef SOURCE_IN\nvec4 color = vec4(as * Cs * ab, as * ab);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef DESTINATION_IN\nvec4 color = vec4(ab * Cb * as, ab * as);\nvec4 fadeColor = (1.0 - u_opacity) * u_inFadeOpacity * vec4(ab * Cb, ab);\ngl_FragColor = color + fadeColor;\n#endif\n#ifdef SOURCE_OUT\ngl_FragColor = vec4(as * Cs * (1.0 - ab), as * (1.0 - ab));\n#endif\n#ifdef DESTINATION_OUT\ngl_FragColor = vec4(ab * Cb * (1.0 - as), ab * (1.0 - as));\n#endif\n#ifdef SOURCE_ATOP\ngl_FragColor = vec4(as * Cs * ab + ab * Cb * (1.0 - as), ab);\n#endif\n#ifdef DESTINATION_ATOP\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * as, as);\n#endif\n#ifdef XOR\ngl_FragColor = vec4(as * Cs * (1.0 - ab) + ab * Cb * (1.0 - as),\nas * (1.0 - ab) + ab * (1.0 - as));\n#endif\n#ifdef MULTIPLY\ngl_FragColor = vec4(as * Cs * ab * Cb + (1.0 - ab) * as * Cs + (1.0 - as) * ab * Cb,\nas + ab * (1.0 - as));\n#endif\n#ifdef SCREEN\ngl_FragColor = vec4((Cs + Cb - Cs * Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef OVERLAY\nvec3 f = vec3(overlay(Cb.r, Cs.r), overlay(Cb.g, Cs.g), overlay(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DARKEN\ngl_FragColor = vec4(min(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LIGHTER\ngl_FragColor = vec4(as * Cs + ab * Cb, as + ab);\n#endif\n#ifdef LIGHTEN\ngl_FragColor = vec4(max(Cs, Cb) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_DODGE\nvec3 f = vec3(colorDodge(Cb.r, Cs.r), colorDodge(Cb.g, Cs.g), colorDodge(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR_BURN\nvec3 f = vec3(colorBurn(Cb.r, Cs.r), colorBurn(Cb.g, Cs.g), colorBurn(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HARD_LIGHT\nvec3 f = vec3(hardLight(Cb.r, Cs.r), hardLight(Cb.g, Cs.g), hardLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SOFT_LIGHT\nvec3 f = vec3(softLight(Cb.r, Cs.r), softLight(Cb.g, Cs.g), softLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef DIFFERENCE\ngl_FragColor = vec4(abs(Cb - Cs) * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef EXCLUSION\nvec3 f = Cs + Cb - 2.0 * Cs * Cb;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef INVERT\ngl_FragColor = vec4((1.0 - Cb) * as * ab + Cb * ab * (1.0 - as), ab);\n#endif\n#ifdef VIVID_LIGHT\nvec3 f = vec3(vividLight(Cb.r, Cs.r),\nvividLight(Cb.g, Cs.g),\nvividLight(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef HUE\nvec3 f = setLumSat(Cs,Cb,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef SATURATION\nvec3 f = setLumSat(Cb,Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef COLOR\nvec3 f = setLum(Cs,Cb);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef LUMINOSITY\nvec3 f = setLum(Cb,Cs);\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef PLUS\ngl_FragColor = clamp(vec4(src.r + Cb.r, src.g + Cb.g, src.b + Cb.b, as + ab), 0.0, 1.0);\n#endif\n#ifdef MINUS\ngl_FragColor = vec4(clamp(vec3(Cb.r - src.r, Cb.g - src.g, Cb.b - src.b), 0.0, 1.0), ab * as);\n#endif\n#ifdef AVERAGE\nvec3 f = (Cb + Cs) / 2.0;\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#ifdef REFLECT\nvec3 f = vec3(reflectBlend(Cb.r, Cs.r),\nreflectBlend(Cb.g, Cs.g),\nreflectBlend(Cb.b, Cs.b));\ngl_FragColor = vec4(f * as * ab + Cs * as * (1.0 - ab) + Cb * ab *(1.0 - as),\nas + ab * (1.0 - as));\n#endif\n#endif\n}","blend.vert":"attribute vec2 a_position;\nvarying mediump vec2 v_uv;\nvoid main(void) {\ngl_Position = vec4(a_position , 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},filtering:{"bicubic.glsl":"vec4 computeWeights(float v) {\nfloat b = 1.0 / 6.0;\nfloat v2 = v * v;\nfloat v3 = v2 * v;\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\nfloat w3 = b * v3;\nreturn vec4(w0, w1, w2, w3);\n}\nvec4 bicubicOffsetsAndWeights(float v) {\nvec4 w = computeWeights(v);\nfloat g0 = w.x + w.y;\nfloat g1 = w.z + w.w;\nfloat h0 = 1.0 - (w.y / g0) + v;\nfloat h1 = 1.0 + (w.w / g1) - v;\nreturn vec4(h0, h1, g0, g1);\n}\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\nvec2 texel = coords * texSize - 0.5;\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\nvec2 coords10 = coords + hgX.x * eX;\nvec2 coords00 = coords - hgX.y * eX;\nvec2 coords11 = coords10 + hgY.x * eY;\nvec2 coords01 = coords00 + hgY.x * eY;\ncoords10 = coords10 - hgY.y * eY;\ncoords00 = coords00 - hgY.y * eY;\nvec4 color00 = texture2D(sampler, coords00);\nvec4 color10 = texture2D(sampler, coords10);\nvec4 color01 = texture2D(sampler, coords01);\nvec4 color11 = texture2D(sampler, coords11);\ncolor00 = mix(color00, color01, hgY.z);\ncolor10 = mix(color10, color11, hgY.z);\ncolor00 = mix(color00, color10, hgX.z);\nreturn color00;\n}","bilinear.glsl":"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\nvec2 texelStart = floor(coords * texSize);\nvec2 coord0 = texelStart / texSize;\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\nvec4 color0 = texture2D(sampler, coord0);\nvec4 color1 = texture2D(sampler, coord1);\nvec4 color2 = texture2D(sampler, coord2);\nvec4 color3 = texture2D(sampler, coord3);\nvec2 blend = fract(coords * texSize);\nvec4 color01 = mix(color0, color1, blend.x);\nvec4 color23 = mix(color2, color3, blend.x);\nvec4 color = mix(color01, color23, blend.y);\n#ifdef NNEDGE\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\n#endif\nreturn color;\n}","epx.glsl":"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\nvec2 invSize = 1.0 / texSize;\nvec2 texel = coords * texSize;\nvec2 texel_i = floor(texel);\nvec2 texel_frac = fract(texel);\nvec4 colorP = texture2D(sampler, texel_i * invSize);\nvec4 colorP1 = vec4(colorP);\nvec4 colorP2 = vec4(colorP);\nvec4 colorP3 = vec4(colorP);\nvec4 colorP4 = vec4(colorP);\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\ncolorP1 = colorA;\n}\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\ncolorP2 = colorB;\n}\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\ncolorP3 = colorC;\n}\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\ncolorP4 = colorD;\n}\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\nreturn mix(colorP12, colorP34, texel_frac.y);\n}"},fx:{integrate:{"integrate.frag":"precision mediump float;\nuniform lowp sampler2D u_sourceTexture;\nuniform lowp sampler2D u_maskTexture;\nuniform mediump float u_zoomLevel;\nuniform highp float u_timeDelta;\nuniform highp float u_animationTime;\nvarying highp vec2 v_texcoord;\n#include <materials/utils.glsl>\nvoid main()\n{\n#ifdef DELTA\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\nvec4 data0 = texture2D(u_maskTexture, v_texcoord);\nfloat flags = data0.r * 255.0;\nfloat groupMinZoom = data0.g * 255.0;\nfloat isVisible = getFilterBit(flags, 0);\nfloat wouldClip = step(groupMinZoom, u_zoomLevel);\nfloat direction = wouldClip * 1.0 + (1.0 - wouldClip) * -1.0;\nfloat dt = u_timeDelta / max(u_animationTime, 0.0001);\nvec4 nextState = vec4(texel + direction * dt);\ngl_FragColor =  vec4(nextState);\n#elif defined(UPDATE)\nvec4 texel = texture2D(u_sourceTexture, v_texcoord);\ngl_FragColor = texel;\n#endif\n}","integrate.vert":"precision mediump float;\nattribute vec2 a_pos;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(a_pos * 2.0 - 1.0, 0.0, 1.0);\n}"}},highlight:{"blur.frag":"varying mediump vec2 v_texcoord;\nuniform mediump vec4 u_direction;\nuniform mediump mat4 u_channelSelector;\nuniform mediump float u_sigma;\nuniform sampler2D u_texture;\nmediump float gauss1(mediump vec2 dir) {\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\n}\nmediump vec4 selectChannel(mediump vec4 sample) {\nreturn u_channelSelector * sample;\n}\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\nmediump float w = gauss1(i * u_direction.xy);\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\nweight += w;\n}\nvoid main(void) {\nmediump float tot = 0.0;\nmediump float weight = 0.0;\naccumGauss1(-5.0, tot, weight);\naccumGauss1(-4.0, tot, weight);\naccumGauss1(-3.0, tot, weight);\naccumGauss1(-2.0, tot, weight);\naccumGauss1(-1.0, tot, weight);\naccumGauss1(0.0, tot, weight);\naccumGauss1(1.0, tot, weight);\naccumGauss1(2.0, tot, weight);\naccumGauss1(3.0, tot, weight);\naccumGauss1(4.0, tot, weight);\naccumGauss1(5.0, tot, weight);\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\n}","highlight.frag":"varying mediump vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform mediump float u_sigma;\nuniform sampler2D u_shade;\nuniform mediump vec2 u_minMaxDistance;\nmediump float estimateDistance() {\nmediump float y = texture2D(u_texture, v_texcoord)[3];\nconst mediump float y0 = 0.5;\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\nmediump float d = (y - y0) / m0;\nreturn d;\n}\nmediump vec4 shade(mediump float d) {\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\n}\nvoid main(void) {\nmediump float d = estimateDistance();\ngl_FragColor = shade(d);\n}","textured.vert":"attribute mediump vec2 a_position;\nattribute mediump vec2 a_texcoord;\nvarying mediump vec2 v_texcoord;\nvoid main(void) {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_texcoord = a_texcoord;\n}"},magnifier:{"magnifier.frag":"uniform lowp vec4 u_background;\nuniform mediump sampler2D u_readbackTexture;\nuniform mediump sampler2D u_maskTexture;\nuniform mediump sampler2D u_overlayTexture;\nuniform bool u_maskEnabled;\nuniform bool u_overlayEnabled;\nvarying mediump vec2 v_texCoord;\nconst lowp float barrelFactor = 1.1;\nlowp vec2 barrel(lowp vec2 uv) {\nlowp vec2 uvn = uv * 2.0 - 1.0;\nif (uvn.x == 0.0 && uvn.y == 0.0) {\nreturn vec2(0.5, 0.5);\n}\nlowp float theta = atan(uvn.y, uvn.x);\nlowp float r = pow(length(uvn), barrelFactor);\nreturn r * vec2(cos(theta), sin(theta)) * 0.5 + 0.5;\n}\nvoid main(void)\n{\nlowp vec4 color = texture2D(u_readbackTexture, barrel(v_texCoord));\ncolor = (color + (1.0 - color.a) * u_background);\nlowp float mask = u_maskEnabled ? texture2D(u_maskTexture, v_texCoord).a : 1.0;\ncolor *= mask;\nlowp vec4 overlayColor = u_overlayEnabled ? texture2D(u_overlayTexture, v_texCoord) : vec4(0);\ngl_FragColor = overlayColor + (1.0 - overlayColor.a) * color;\n}","magnifier.vert":"precision mediump float;\nattribute mediump vec2 a_pos;\nuniform mediump vec4 u_drawPos;\nvarying mediump vec2 v_texCoord;\nvoid main(void)\n{\nv_texCoord = a_pos;\ngl_Position = vec4(u_drawPos.xy + vec2(a_pos - 0.5) * u_drawPos.zw, 0.0, 1.0);\n}"},materials:{"attributeData.glsl":"uniform highp sampler2D u_attributeData0;\nuniform highp sampler2D u_attributeData1;\nuniform highp sampler2D u_attributeData2;\nuniform highp sampler2D u_attributeData3;\nuniform highp int u_attributeTextureSize;\nhighp vec2 getAttributeDataCoords(in highp vec4 id) {\nhighp vec4 texel = unpackDisplayIdTexel(id);\nhighp float size = float(u_attributeTextureSize);\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256 + int(texel.a) * 256 * 256 * 256);\nhighp float col = mod(u32, size);\nhighp float row = (u32 - col) / size;\nhighp float u = col / size;\nhighp float v = row / size;\nreturn vec2(u, v);\n}\nhighp vec4 getAttributeData0(in highp vec4 id) {\nvec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData0, coords);\n}\nhighp vec4 getAttributeData1(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData1, coords);\n}\nhighp vec4 getAttributeData2(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData2, coords);\n}\nhighp vec4 getAttributeData3(in highp vec4 id) {\nhighp vec2 coords = getAttributeDataCoords(id);\nreturn texture2D(u_attributeData3, coords);\n}\nfloat u88VVToFloat(in vec2 v) {\nbool isMagic = v.x == 255.0 && v.y == 255.0;\nif (isMagic) {\nreturn NAN_MAGIC_NUMBER;\n}\nreturn (v.x + v.y * float(0x100)) - 32768.0;\n}","constants.glsl":"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\nconst float SIGNED_BYTE_TO_UNSIGNED = 128.0;\nconst float POSITION_PRECISION = 1.0 / 8.0;\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\nconst float SOFT_EDGE_RATIO = 1.0;\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\nconst float THIN_LINE_HALF_WIDTH = 1.0;\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\nconst float OFFSET_PRECISION = 1.0 / 8.0;\nconst float OUTLINE_SCALE = 1.0 / 5.0;\nconst float SDF_FONT_SIZE = 24.0;\nconst float MAX_SDF_DISTANCE = 8.0;\nconst float PLACEMENT_PADDING = 8.0;\nconst float EPSILON = 0.0000001;\nconst int MAX_FILTER_COUNT = 2;\nconst int ATTR_VV_SIZE = 0;\nconst int ATTR_VV_COLOR = 1;\nconst int ATTR_VV_OPACITY = 2;\nconst int ATTR_VV_ROTATION = 3;\nconst highp float NAN_MAGIC_NUMBER = 1e-30;",fill:{"common.glsl":"#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\n#endif\n#ifdef DOT_DENSITY\nuniform lowp vec4 u_isActive[ 2 ];\nuniform highp float u_dotValue;\nuniform highp float u_tileDotsOverArea;\nuniform highp float u_dotTextureDotCount;\nuniform mediump float u_tileZoomFactor;\n#endif\nvarying vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp float v_flags;\n#ifdef PATTERN\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_tileTextureCoord;\n#endif\n#ifdef DOT_DENSITY\nvarying highp vec2 v_dotTextureCoords;\nvarying highp vec4 v_dotThresholds[ 2 ];\n#endif","fill.frag":"precision highp float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/fill/common.glsl>\n#ifdef PATTERN\nuniform lowp sampler2D u_texture;\n#endif\n#ifdef DOT_DENSITY\nuniform mediump mat4 u_dotColors[ 2 ];\nuniform sampler2D u_dotTextures[ 2 ];\nuniform vec4 u_dotBackgroundColor;\n#endif\nvoid main() {\n#ifdef ID\ngl_FragColor = v_id;\n#elif defined(PATTERN)\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\nlowp vec4 color = texture2D(u_texture, samplePos);\ngl_FragColor = v_opacity * v_color * color;\n#elif defined(DOT_DENSITY) && !defined(HIGHLIGHT)\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\n#ifdef DD_DOT_BLENDING\nvec4 isPositive0 = step(0.0, difference0);\nvec4 isPositive1 = step(0.0, difference1);\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\nfloat lessThanEqZero = step(weightSum, 0.0);\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\nfloat divisor = (weightSum + lessThanEqZero);\nvec4 weights0 = difference0 * isPositive0 / divisor;\nvec4 weights1 = difference1 * isPositive1 / divisor;\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\n#else\nfloat diffMax = max(max4(difference0), max4(difference1));\nfloat lessThanZero = step(diffMax, 0.0);\nfloat greaterOrEqZero = 1.0 - lessThanZero;\nvec4 isMax0 = step(diffMax, difference0);\nvec4 isMax1 = step(diffMax, difference1);\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\n#endif\ngl_FragColor = preEffectColor;\n#else\ngl_FragColor = v_opacity * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = 1.0;\n#endif\n}","fill.vert":"precision highp float;\n#ifdef DOT_DENSITY\nattribute float a_inverseArea;\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 a_aux3 = vec4(0.0);\nvec2 a_zoomRange = vec2(0.0, 10000.0);\n#else\nattribute vec4 a_color;\nattribute vec4 a_tlbr;\nattribute vec4 a_aux1;\nattribute vec2 a_aux2;\nattribute vec4 a_aux3;\nattribute vec2 a_zoomRange;\n#endif\n#include <materials/vcommon.glsl>\n#include <materials/fill/common.glsl>\n#ifdef DOT_DENSITY\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\n}\n#endif\nvoid main()\n{\nINIT;\nfloat a_bitSet = a_aux3.a;\nv_color     = getColor(a_color, a_bitSet, 0);\nv_opacity   = getOpacity();\nv_id        = norm(a_id);\nv_pos       = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\nv_flags     = getFilterFlags();\n#ifdef PATTERN\nvec2 aux2 = (1.0 / SIGNED_BYTE_TO_UNSIGNED) * a_aux2;\nfloat width = u_pixelRatio * u_zoomFactor * a_aux1.x * aux2.x;\nfloat height = u_pixelRatio * u_zoomFactor * a_aux1.y * aux2.y;\nfloat angle = C_256_TO_RAD * a_aux3.z;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\n-sinA / width, cosA / height, 0,\n0,            0,             1);\nvec2 symbolOffset = (a_aux1.zw - SIGNED_BYTE_TO_UNSIGNED) / vec2(width, height);\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\nv_tlbr = a_tlbr / u_mosaicSize.xyxy;\n#elif defined(DOT_DENSITY)\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\n#endif\ngl_Position = vec4(clip(v_color, v_pos, v_flags, a_zoomRange), 1.0);\n}"},icon:{"common.glsl":"uniform lowp vec2 u_mosaicSize;\nvarying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying highp vec4 v_sizeTex;\nvarying mediump vec3 v_pos;\nvarying highp float v_filters;\nvarying lowp float v_opacity;\n#ifdef SDF\nvarying lowp vec4 v_outlineColor;\nvarying mediump float v_outlineWidth;\nvarying mediump float v_distRatio;\nvarying mediump float v_overridingOutlineColor;\nvarying mediump float v_isThin;\n#endif","icon.frag":"precision mediump float;\n#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/icon/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nvec2 v_size = v_sizeTex.xy;\nvec2 v_tex  = v_sizeTex.zw;\n#ifdef SDF\nlowp vec4 fillPixelColor = v_color;\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\nfloat size = max(v_size.x, v_size.y);\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\nfloat outlineWidth = v_outlineWidth;\n#ifdef HIGHLIGHT\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\n#endif\nif (outlineWidth > 0.25) {\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\nfloat clampedOutlineSize = min(outlineWidth, size);\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\ngl_FragColor = v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\n}\nelse {\ngl_FragColor = v_opacity * fillPixelColor;\n}\n#else\nlowp vec4 texColor = texture2D(u_texture, v_tex);\ngl_FragColor = v_opacity * texColor * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","icon.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_outlineColor;\nattribute vec4 a_sizeAndOutlineWidth;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nattribute vec2 a_bitSetAndDistRatio;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/icon/common.glsl>\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float referenceSize, in float bitSet) {\n#ifdef VV_SIZE\nfloat r = getSize(baseSize.y) / referenceSize;\nbaseSize.xy *= r;\noffset.xy *= r;\nfloat scaleSymbolProportionally = getBit(bitSet, 3);\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\n#endif\nreturn baseSize;\n}\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\nfloat isMapAligned = getBit(a_bitSet, 0);\nvec3  offset       = getRotation() * vec3(in_offset, 0.0);\nreturn getMatrix(isMapAligned) * offset;\n}\nvoid main()\n{\nINIT;\nvec2  a_size   = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\nvec2  a_offset = a_vertexOffset / 16.0;\nfloat a_outlineSize = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\nfloat a_bitSet = a_bitSetAndDistRatio.x;\nvec2 v_size = getMarkerSize(a_offset, a_size, a_outlineSize, a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0, a_bitSet);\nvec2 v_tex      = a_texCoords / u_mosaicSize;\nv_color    = getColor(a_color, a_bitSet, 1);\nv_opacity  = getOpacity();\nv_id       = norm(a_id);\nv_filters  = getFilterFlags();\nv_pos      = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + getOffset(a_offset, a_bitSet);\nv_sizeTex  = vec4(v_size.xy, v_tex.xy);\n#ifdef SDF\nv_isThin   = getBit(a_bitSet, 2);\n#ifdef VV_COLOR\nv_overridingOutlineColor = v_isThin;\n#else\nv_overridingOutlineColor = 0.0;\n#endif\nv_outlineWidth = min(a_outlineSize, max(max(v_size.x, v_size.y) - 0.99, 0.0));\nv_outlineColor = a_outlineColor;\nv_distRatio = a_bitSetAndDistRatio.y / 126.0;\n#endif\ngl_Position = vec4(clip(v_color, v_pos, v_filters, a_zoomRange), 1.0);\n}"},label:{"common.glsl":"uniform mediump float u_zoomLevel;\nuniform mediump float u_mapRotation;\nuniform mediump float u_mapAligned;\nuniform mediump vec2 u_mosaicSize;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying mediump vec2 v_tex;\nvarying mediump vec4 v_color;\nvarying lowp vec4 v_animation;","label.frag":"#include <materials/text/text.frag>","label.vert":"precision highp float;\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texAndSize;\nattribute vec4 a_refSymbolAndPlacementOffset;\nattribute vec4 a_glyphData;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nuniform float u_mapRotation;\nuniform float u_mapAligned;\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\nfloat glyphAngle = angle * 360.0 / 254.0;\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\nfloat z = 0.0;\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\nreturn z;\n}\nvoid main()\n{\nINIT;\nfloat groupMinZoom    = getMinZoom();\nfloat glyphMinZoom    = a_glyphData.x;\nfloat glyphMaxZoom    = a_glyphData.y;\nfloat glyphAngle      = a_glyphData.z;\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\nfloat fontSize           = a_texAndSize.z;\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\nv_color     = animation * ((1.0 - u_isHalo) * a_color + (u_isHalo * a_haloColor));\nv_opacity   = 1.0;\nv_tex       = a_texCoords / u_mosaicSize;\nv_edgeDistanceOffset = u_isHalo * haloSize / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\ngl_Position = vec4(applyFilterLabels(v_color, v_pos, getFilterFlags()), 1.0);\n#ifdef DEBUG\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\n#endif\n}"},line:{"common.glsl":"varying lowp vec4 v_color;\nvarying highp vec4 v_id;\nvarying mediump vec2 v_normal;\nvarying mediump float v_lineHalfWidth;\nvarying lowp float v_opacity;\nvarying highp vec3 v_pos;\n#ifdef PATTERN\nuniform mediump vec2 u_mosaicSize;\nvarying mediump vec4 v_tlbr;\nvarying mediump vec2 v_patternSize;\n#endif\n#if defined(PATTERN) || defined(SDF)\nvarying highp float v_accumulatedDistance;\n#endif","line.frag":"precision lowp float;\n#include <util/encoding.glsl>\n#include <materials/constants.glsl>\n#include <materials/line/common.glsl>\nuniform lowp float u_blur;\n#if defined(PATTERN) || defined(SDF)\nuniform sampler2D u_texture;\nuniform highp float u_pixelRatio;\n#endif\n#ifdef SDF\nconst float sdfPatternHalfWidth = 15.5;\nuniform mediump float u_antialiasing;\n#endif\nvoid main()\n{\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(v_lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nmediump float fragDist = length(v_normal) * v_lineHalfWidth;\nlowp float alpha = clamp(thinLineFactor * (v_lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\n#if defined(SDF) && !defined(HIGHLIGHT)\nmediump float lineHalfWidth = v_lineHalfWidth;\nmediump float lineWidthRatio = max(lineHalfWidth - 0.55 * u_antialiasing, 0.25) / sdfPatternHalfWidth;\nmediump float relativeTexX = fract(u_pixelRatio * v_accumulatedDistance * 0.5 / (lineWidthRatio * v_patternSize.x));\nmediump float relativeTexY = 0.5 + 0.25 * v_normal.y;\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexX, relativeTexY));\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\nfloat dist = d * lineHalfWidth;\nlowp vec4 fillPixelColor = v_opacity * alpha * clamp(0.5 - dist, 0.0, 1.0) * v_color;\ngl_FragColor = fillPixelColor;\n#elif defined(PATTERN) && !defined(HIGHLIGHT)\nmediump float lineHalfWidth = v_lineHalfWidth;\nmediump float adjustedPatternWidth = v_patternSize.x * 2.0 * lineHalfWidth / v_patternSize.y;\nmediump float relativeTexX = fract(u_pixelRatio * v_accumulatedDistance / adjustedPatternWidth);\nmediump float relativeTexY = 0.5 + 0.5 * v_normal.y;\nmediump vec2 texCoord = mix(v_tlbr.xy, v_tlbr.zw, vec2(relativeTexY, relativeTexX));\nlowp vec4 color = texture2D(u_texture, texCoord);\ngl_FragColor = v_opacity * alpha * v_color * color;\n#else\ngl_FragColor = v_opacity * alpha * v_color;\n#endif\n#ifdef HIGHLIGHT\ngl_FragColor.a = step(1.0 / 255.0, gl_FragColor.a);\n#endif\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","line.vert":"precision highp float;\nattribute vec4 a_color;\nattribute vec4 a_offsetAndNormal;\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\nattribute vec4 a_tlbr;\nattribute vec4 a_segmentDirection;\nattribute vec2 a_aux;\nattribute vec2 a_zoomRange;\n#include <materials/vcommon.glsl>\n#include <materials/line/common.glsl>\nconst float SCALE = 1.0 / 31.0;\nconst float WIDTH_SCALE = 1.0 / 1024.0;\nfloat getBaseLineHalfWidth(in float in_lineHalfWidth) {\n#ifdef VV_SIZE\nfloat referenceHalfWidth = a_aux.x * WIDTH_SCALE;\nfloat lineWidth = 2.0 * in_lineHalfWidth;\nreturn 0.5 * (in_lineHalfWidth / referenceHalfWidth) * getSize(lineWidth);\n#else\nreturn in_lineHalfWidth;\n#endif\n}\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\n#ifdef HIGHLIGHT\nhalfWidth = max(halfWidth, 2.0);\n#endif\nreturn halfWidth;\n}\nvec2 getDist(in vec2 offset, in float halfWidth) {\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\nreturn thinLineFactor * halfWidth * offset * SCALE;\n}\nvoid main()\n{\nINIT;\nfloat a_bitSet          = a_segmentDirection.w;\nfloat a_accumulatedDist = a_accumulatedDistanceAndHalfWidth.x;\nfloat a_lineHalfWidth   = a_accumulatedDistanceAndHalfWidth.y * WIDTH_SCALE;\nfloat aa                = 0.5 * u_antialiasing;\nvec2  a_offset          = a_offsetAndNormal.xy;\nfloat baseWidth = getBaseLineHalfWidth(a_lineHalfWidth);\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\nfloat z         = 2.0 * step(baseWidth, 0.0);\nvec2  dist      = getDist(a_offset, halfWidth);\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\nvec3  pos       = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0) + offset;\nv_color         = getColor(a_color, a_bitSet, 0);\nv_opacity       = getOpacity();\nv_lineHalfWidth = halfWidth;\nv_id            = norm(a_id);\nv_normal        = a_offsetAndNormal.zw * SCALE;\nv_pos           = vec3(pos.xy, z);\n#ifdef PATTERN\nv_tlbr          = a_tlbr / u_mosaicSize.xyxy;\nv_patternSize   = vec2(a_tlbr.z - a_tlbr.x, a_tlbr.w - a_tlbr.y);\n#endif\n#if defined(PATTERN) || defined(SDF)\nv_accumulatedDistance = a_accumulatedDist * u_zoomFactor + dot(SCALE * a_segmentDirection.xy, dist);\n#endif\ngl_Position = vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},text:{"common.glsl":"uniform highp vec2 u_mosaicSize;\nvarying highp vec4 v_id;\nvarying mediump vec3 v_pos;\nvarying lowp float v_opacity;\nvarying lowp vec4 v_color;\nvarying highp vec2 v_tex;\nvarying mediump float v_antialiasingWidth;\nvarying mediump float v_edgeDistanceOffset;\nvarying lowp float v_transparency;","text.frag":"precision mediump float;\n#include <materials/text/common.glsl>\nuniform lowp sampler2D u_texture;\nvoid main()\n{\nfloat SDF_CUTOFF = (2.0 / 8.0);\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\nlowp float dist = texture2D(u_texture, v_tex).a;\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\n#ifdef HIGHLIGHT\nedge /= 2.0;\n#endif\nlowp float aa = v_antialiasingWidth;\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\ngl_FragColor = alpha * v_color * v_opacity;\n#ifdef ID\nif (gl_FragColor.a < 1.0 / 255.0) {\ndiscard;\n}\ngl_FragColor = v_id;\n#endif\n}","text.vert":"precision highp float;\n#include <materials/utils.glsl>\n#include <materials/vcommon.glsl>\n#include <materials/text/common.glsl>\nattribute vec4 a_color;\nattribute vec4 a_haloColor;\nattribute vec4 a_texFontSize;\nattribute vec4 a_aux;\nattribute vec2 a_zoomRange;\nattribute vec2 a_vertexOffset;\nattribute vec2 a_texCoords;\nuniform float u_isHalo;\nfloat getTextSize(in float baseSize, in float referenceSize) {\n#ifdef VV_SIZE\nreturn getSize(baseSize);\n#endif\nreturn baseSize;\n}\nvoid main()\n{\nINIT;\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\nfloat a_bitSet        = a_aux.w;\nfloat a_fontSize      = a_texFontSize.z;\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\nfloat fontSize      = getTextSize(a_fontSize, a_referenceSize);\nfloat scaleFactor   = fontSize / a_fontSize;\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\nvec3  offset        = getRotation() * vec3(scaleFactor * a_offset, 0.0);\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\nv_color   = u_isHalo * a_haloColor + (1.0 - u_isHalo) * getColor(a_color, a_bitSet, 1);\nv_opacity = getOpacity();\nv_id      = norm(a_id);\nv_tex     = a_texCoords / u_mosaicSize;\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\nv_edgeDistanceOffset = u_isHalo * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\n}"},"utils.glsl":"float rshift(in float u32, in int amount) {\nreturn floor(u32 / pow(2.0, float(amount)));\n}\nfloat getBit(in float bitset, in int bitIndex) {\nfloat offset = pow(2.0, float(bitIndex));\nreturn mod(floor(bitset / offset), 2.0);\n}\nfloat getFilterBit(in float bitset, in int bitIndex) {\nreturn getBit(bitset, bitIndex + 1);\n}\nfloat getHighlightBit(in float bitset) {\nreturn getBit(bitset, 0);\n}\nhighp vec4 unpackDisplayIdTexel(in highp vec4 bitset) {\nfloat isAggregate = getBit(bitset.a, 7);\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec4(bitset.rgba) - vec4(0.0, 0.0, 0.0, float(0x80)));\n}\nvec4 unpack(in float u32) {\nfloat r = mod(rshift(u32, 0), 255.0);\nfloat g = mod(rshift(u32, 8), 255.0);\nfloat b = mod(rshift(u32, 16), 255.0);\nfloat a = mod(rshift(u32, 24), 255.0);\nreturn vec4(r, g, b, a);\n}\nvec4 norm(in vec4 v) {\nreturn v /= 255.0;\n}\nfloat max4(vec4 target) {\nreturn max(max(max(target.x, target.y), target.z), target.w);\n}\nvec2 unpack_u8_nf32(vec2 bytes) {\nreturn (bytes - 127.0) / 127.0;\n}","vcommon.glsl":"#include <materials/constants.glsl>\n#include <materials/utils.glsl>\n#include <materials/attributeData.glsl>\n#include <materials/vv.glsl>\nattribute vec2 a_pos;\nattribute highp vec4 a_id;\nuniform highp mat3 u_dvsMat3;\nuniform highp mat3 u_displayMat3;\nuniform highp mat3 u_displayViewMat3;\nuniform highp float u_pixelRatio;\nuniform mediump float u_zoomFactor;\nuniform mediump float u_antialiasing;\nuniform mediump float u_currentZoom;\nvec4 VV_ADATA = vec4(0.0);\nvoid loadVisualVariableData(inout vec4 target) {\n#ifdef OES_TEXTURE_FLOAT\ntarget.rgba = getAttributeData2(a_id);\n#else\nvec4 data0 = getAttributeData2(a_id);\nvec4 data1 = getAttributeData3(a_id);\ntarget.r = u88VVToFloat(data0.rg * 255.0);\ntarget.g = u88VVToFloat(data0.ba * 255.0);\ntarget.b = u88VVToFloat(data1.rg * 255.0);\ntarget.a = u88VVToFloat(data1.ba * 255.0);\n#endif\n}\n#ifdef VV\n#define INIT loadVisualVariableData(VV_ADATA)\n#else\n#define INIT\n#endif\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\n#ifdef VV_COLOR\nfloat isColorLocked   = getBit(a_bitSet, index);\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\n#else\nreturn a_color;\n#endif\n}\nfloat getOpacity() {\n#ifdef VV_OPACITY\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\n#else\nreturn 1.0;\n#endif\n}\nfloat getSize(in float in_size) {\n#ifdef VV_SIZE\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE]);\n#else\nreturn in_size;\n#endif\n}\nmat3 getRotation() {\n#ifdef VV_ROTATION\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\n#else\nreturn mat3(1.0);\n#endif\n}\nfloat getFilterFlags() {\n#ifdef IGNORES_SAMPLER_PRECISION\nreturn ceil(getAttributeData0(a_id).x * 255.0);\n#else\nreturn getAttributeData0(a_id).x * 255.0;\n#endif\n}\nvec4 getAnimationState() {\nreturn getAttributeData1(a_id);\n}\nfloat getMinZoom() {\nvec4 data0 = getAttributeData0(a_id) * 255.0;\nreturn data0.g;\n}\nmat3 getMatrix(float isMapAligned) {\nreturn isMapAligned * u_displayViewMat3 + (1.0 - isMapAligned) * u_displayMat3;\n}\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifdef INSIDE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#elif defined(OUTSIDE)\npos.z += 2.0 * getFilterBit(filterFlags, 1);\n#elif defined(HIGHLIGHT)\n#if !defined(HIGHLIGHT_ALL)\npos.z += 2.0 * (1.0 - getHighlightBit(filterFlags));\n#endif\n#endif\npos.z += 2.0 * (step(minMaxZoom.y, u_currentZoom) + (1.0 - step(minMaxZoom.x, u_currentZoom)));\nreturn pos;\n}\nvec3 applyFilterLabels(inout vec4 color, inout vec3 pos, in float filterFlags) {\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\n#ifndef OUTSIDE_LABELS_VISIBLE\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\n#endif\nreturn pos;\n}","vv.glsl":"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\n#define VV_SIZE\n#endif\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\n#define VV\n#endif\n#ifdef VV_COLOR\nuniform highp float u_vvColorValues[8];\nuniform vec4 u_vvColors[8];\n#endif\n#ifdef VV_SIZE_MIN_MAX_VALUE\nuniform highp vec4 u_vvSizeMinMaxValue;\n#endif\n#ifdef VV_SIZE_SCALE_STOPS\nuniform highp float u_vvSizeScaleStopsValue;\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nuniform highp float u_vvSizeFieldStopsValues[6];\nuniform float u_vvSizeFieldStopsSizes[6];\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nuniform highp float u_vvSizeUnitValueWorldToPixelsRatio;\n#endif\n#ifdef VV_OPACITY\nuniform highp float u_vvOpacityValues[8];\nuniform float u_vvOpacities[8];\n#endif\n#ifdef VV_ROTATION\nuniform lowp float u_vvRotationType;\n#endif\nbool isNan(float val) {\nreturn (val == NAN_MAGIC_NUMBER);\n}\n#ifdef VV_SIZE_MIN_MAX_VALUE\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nfloat interpolationRatio = (sizeValue  - u_vvSizeMinMaxValue.x) / (u_vvSizeMinMaxValue.y - u_vvSizeMinMaxValue.x);\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\nreturn u_vvSizeMinMaxValue.z + interpolationRatio * (u_vvSizeMinMaxValue.w - u_vvSizeMinMaxValue.z);\n}\n#endif\n#ifdef VV_SIZE_FIELD_STOPS\nconst int VV_SIZE_N = 6;\nfloat getVVStopsSize(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nif (sizeValue <= u_vvSizeFieldStopsValues[0]) {\nreturn u_vvSizeFieldStopsSizes[0];\n}\nfor (int i = 1; i < VV_SIZE_N; ++i) {\nif (u_vvSizeFieldStopsValues[i] >= sizeValue) {\nfloat f = (sizeValue - u_vvSizeFieldStopsValues[i-1]) / (u_vvSizeFieldStopsValues[i] - u_vvSizeFieldStopsValues[i-1]);\nreturn mix(u_vvSizeFieldStopsSizes[i-1], u_vvSizeFieldStopsSizes[i], f);\n}\n}\nreturn u_vvSizeFieldStopsSizes[VV_SIZE_N - 1];\n}\n#endif\n#ifdef VV_SIZE_UNIT_VALUE\nfloat getVVUnitValue(float sizeValue, float fallback) {\nif (isNan(sizeValue)) {\nreturn fallback;\n}\nreturn u_vvSizeUnitValueWorldToPixelsRatio * sizeValue;\n}\n#endif\n#ifdef VV_OPACITY\nconst int VV_OPACITY_N = 8;\nfloat getVVOpacity(float opacityValue) {\nif (isNan(opacityValue)) {\nreturn 1.0;\n}\nif (opacityValue <= u_vvOpacityValues[0]) {\nreturn u_vvOpacities[0];\n}\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\nif (u_vvOpacityValues[i] >= opacityValue) {\nfloat f = (opacityValue - u_vvOpacityValues[i-1]) / (u_vvOpacityValues[i] - u_vvOpacityValues[i-1]);\nreturn mix(u_vvOpacities[i-1], u_vvOpacities[i], f);\n}\n}\nreturn u_vvOpacities[VV_OPACITY_N - 1];\n}\n#endif\n#ifdef VV_ROTATION\nmat4 getVVRotation(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat4(1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat4(cosA, sinA, 0, 0,\n-sinA,  cosA, 0, 0,\n0,     0, 1, 0,\n0,     0, 0, 1);\n}\nmat3 getVVRotationMat3(float rotationValue) {\nif (isNan(rotationValue)) {\nreturn mat3(1, 0, 0,\n0, 1, 0,\n0, 0, 1);\n}\nfloat rotation = rotationValue;\nif (u_vvRotationType == 1.0) {\nrotation = 90.0 - rotation;\n}\nfloat angle = C_DEG_TO_RAD * -rotation;\nfloat sinA = sin(angle);\nfloat cosA = cos(angle);\nreturn mat3(cosA, -sinA, 0,\nsinA, cosA, 0,\n0,    0,    1);\n}\n#endif\n#ifdef VV_COLOR\nconst int VV_COLOR_N = 8;\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\nif (isNan(colorValue) || isColorLocked == 1.0) {\nreturn fallback;\n}\nif (colorValue <= u_vvColorValues[0]) {\nreturn u_vvColors[0];\n}\nfor (int i = 1; i < VV_COLOR_N; ++i) {\nif (u_vvColorValues[i] >= colorValue) {\nfloat f = (colorValue - u_vvColorValues[i-1]) / (u_vvColorValues[i] - u_vvColorValues[i-1]);\nreturn mix(u_vvColors[i-1], u_vvColors[i], f);\n}\n}\nreturn u_vvColors[VV_COLOR_N - 1];\n}\n#endif\nfloat getVVSize(in float size, in float vvSize)  {\n#ifdef VV_SIZE_MIN_MAX_VALUE\nreturn getVVMinMaxSize(vvSize, size);\n#elif defined(VV_SIZE_SCALE_STOPS)\nreturn u_vvSizeScaleStopsValue;\n#elif defined(VV_SIZE_FIELD_STOPS)\nfloat outSize = getVVStopsSize(vvSize, size);\nreturn isNan(outSize) ? size : outSize;\n#elif defined(VV_SIZE_UNIT_VALUE)\nreturn getVVUnitValue(vvSize, size);\n#else\nreturn size;\n#endif\n}"},"post-processing":{blit:{"blit.frag":"precision mediump float;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\ngl_FragColor = texture2D(u_texture, v_uv);\n}"},bloom:{composite:{"composite.frag":"precision mediump float;\nvarying vec2 v_uv;\nuniform sampler2D u_blurTexture1;\nuniform sampler2D u_blurTexture2;\nuniform sampler2D u_blurTexture3;\nuniform sampler2D u_blurTexture4;\nuniform sampler2D u_blurTexture5;\nuniform float u_bloomStrength;\nuniform float u_bloomRadius;\nuniform float u_bloomFactors[NUMMIPS];\nuniform vec3 u_bloomTintColors[NUMMIPS];\nfloat lerpBloomFactor(const in float factor) {\nfloat mirrorFactor = 1.2 - factor;\nreturn mix(factor, mirrorFactor, u_bloomRadius);\n}\nvoid main() {\ngl_FragColor = u_bloomStrength * (\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\n);\n}"},gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\n#define SIGMA RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = float(SIGMA);\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},luminosityHighPass:{"luminosityHighPass.frag":"precision mediump float;\nuniform sampler2D u_texture;\nuniform vec3 u_defaultColor;\nuniform float u_defaultOpacity;\nuniform float u_luminosityThreshold;\nuniform float u_smoothWidth;\nvarying vec2 v_uv;\nvoid main() {\nvec4 texel = texture2D(u_texture, v_uv);\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat v = dot(texel.xyz, luma);\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\ngl_FragColor = mix(outputColor, texel, alpha);\n}"}},blur:{gaussianBlur:{"gaussianBlur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nuniform vec2 u_direction;\nuniform float u_sigma;\nvarying vec2 v_uv;\n#define KERNEL_RADIUS RADIUS\nfloat gaussianPdf(in float x, in float sigma) {\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\n}\nvoid main() {\nvec2 invSize = 1.0 / u_texSize;\nfloat fSigma = u_sigma;\nfloat weightSum = gaussianPdf(0.0, fSigma);\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\nfloat x = float(i);\nfloat w = gaussianPdf(x, fSigma);\nvec2 uvOffset = u_direction * invSize * x;\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\npixelColorSum += (sample1 + sample2) * w;\nweightSum += 2.0 * w;\n}\ngl_FragColor = pixelColorSum /weightSum;\n}"},"radial-blur":{"radial-blur.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nconst float sampleDist = 1.0;\nconst float sampleStrength = 2.2;\nvoid main(void) {\nfloat samples[10];\nsamples[0] = -0.08;\nsamples[1] = -0.05;\nsamples[2] = -0.03;\nsamples[3] = -0.02;\nsamples[4] = -0.01;\nsamples[5] =  0.01;\nsamples[6] =  0.02;\nsamples[7] =  0.03;\nsamples[8] =  0.05;\nsamples[9] =  0.08;\nvec2 dir = 0.5 - v_uv;\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\ndir = dir / dist;\nvec4 color = texture2D(u_colorTexture,v_uv);\nvec4 sum = color;\nfor (int i = 0; i < 10; i++) {\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\n}\nsum *= 1.0 / 11.0;\nfloat t = dist * sampleStrength;\nt = clamp(t, 0.0, 1.0);\ngl_FragColor = mix(color, sum, t);\n}"}},dra:{"dra.frag":"precision mediump float;\nuniform sampler2D u_minColor;\nuniform sampler2D u_maxColor;\nuniform sampler2D u_texture;\nvarying vec2 v_uv;\nvoid main() {\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\nvec4 color = texture2D(u_texture, v_uv);\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\nvec3 colorUnpremultiply = color.rgb / color.a;\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\n}","min-max":{"min-max.frag":"#extension GL_EXT_draw_buffers : require\nprecision mediump float;\n#define CELL_SIZE 2\nuniform sampler2D u_minTexture;\nuniform sampler2D u_maxTexture;\nuniform vec2 u_srcResolution;\nuniform vec2 u_dstResolution;\nvarying vec2 v_uv;\nvoid main() {\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\nvec2 onePixel = vec2(1.0) / u_srcResolution;\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\nvec4 minColor = vec4(1.0);\nvec4 maxColor = vec4(0.0);\nfor (int y = 0; y < CELL_SIZE; ++y) {\nfor (int x = 0; x < CELL_SIZE; ++x) {\nvec2 offset = uv + vec2(x, y) * onePixel;\nminColor = min(minColor, texture2D(u_minTexture, offset));\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\n}\n}\ngl_FragData[0] = minColor;\ngl_FragData[1] = maxColor;\n}"}},"drop-shadow":{composite:{"composite.frag":"precision mediump float;\nuniform sampler2D u_layerFBOTexture;\nuniform sampler2D u_blurTexture;\nuniform vec4 u_shadowColor;\nvarying vec2 v_uv;\nvoid main() {\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\nvec4 blurColor = texture2D(u_blurTexture, v_uv);\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\n}"},"drop-shadow.vert":"precision mediump float;\nattribute vec2 a_position;\nuniform highp mat3 u_displayViewMat3;\nuniform highp vec2 u_offset;\nvarying vec2 v_uv;\nvoid main() {\nvec3 offset = u_displayViewMat3 * vec3(u_offset, 0.0);\ngl_Position = vec4(a_position, 0.0, 1.0) + vec4(offset, 0.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"},"edge-detect":{"frei-chen":{"frei-chen.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform vec2 u_texSize;\nvarying vec2 v_uv;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[9];\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\nvoid main() {\nG[0] = g0,\nG[1] = g1,\nG[2] = g2,\nG[3] = g3,\nG[4] = g4,\nG[5] = g5,\nG[6] = g6,\nG[7] = g7,\nG[8] = g8;\nmat3 I;\nfloat cnv[9];\nvec3 sample;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 9; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\n}"},sobel:{"sobel.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\n}"}},"edge-enhance":{"edge-enhance.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nvarying vec2 v_uv;\nuniform vec2 u_texSize;\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\nmat3 G[2];\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\nvoid main() {\nmat3 I;\nfloat cnv[2];\nvec3 sample;\nG[0] = g0;\nG[1] = g1;\nfor (float i = 0.0; i < 3.0; i++) {\nfor (float j = 0.0; j < 3.0; j++) {\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\nI[int(i)][int(j)] = length(sample);\n}\n}\nfor (int i = 0; i < 2; i++) {\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\ncnv[i] = dp3 * dp3;\n}\nvec4 color = texture2D(u_colorTexture, v_uv);\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\n}"},filterEffect:{"filterEffect.frag":"precision mediump float;\nuniform sampler2D u_colorTexture;\nuniform mat4 u_coefficients;\nvarying vec2 v_uv;\nvoid main() {\nvec4 color = texture2D(u_colorTexture, v_uv);\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\nfloat a = color.a;\ngl_FragColor = vec4(a * rgbw.rgb, a);\n}"},pp:{"pp.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying vec2 v_uv;\nvoid main() {\ngl_Position = vec4(a_position, 0.0, 1.0);\nv_uv = (a_position + 1.0) / 2.0;\n}"}},raster:{bitmap:{"bitmap.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\nuniform sampler2D u_texture;\nuniform highp vec2 u_coordScale;\nuniform lowp float u_opacity;\n#include <filtering/bicubic.glsl>\nvoid main() {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_texture, v_texcoord, u_coordScale);\n#else\nvec4 color = texture2D(u_texture, v_texcoord);\n#endif\nfloat alpha = u_opacity * color.a;\ngl_FragColor = vec4(alpha * color.rgb, alpha);\n}","bitmap.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},common:{"common.glsl":"uniform sampler2D u_image;\nuniform int u_bandCount;\nuniform bool u_isFloatTexture;\nuniform bool u_flipY;\nuniform float u_opacity;\nuniform int u_resampling;\nuniform vec2 u_srcImageSize;\n#ifdef APPLY_PROJECTION\n#include <raster/common/projection.glsl>\n#endif\n#ifdef BICUBIC\n#include <filtering/bicubic.glsl>\n#endif\n#ifdef BILINEAR\n#include <filtering/bilinear.glsl>\n#endif\nvec2 getPixelLocation(vec2 coords) {\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\n#ifdef APPLY_PROJECTION\ntargetLocation = projectPixelLocation(targetLocation);\n#endif\nreturn targetLocation;\n}\nbool isOutside(vec2 coords){\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\nreturn true;\n} else {\nreturn false;\n}\n}\nvec4 getPixel(vec2 pixelLocation) {\n#ifdef BICUBIC\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\n#elif defined(BILINEAR)\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\n#else\nvec4 color = texture2D(u_image, pixelLocation);\n#endif\nreturn color;\n}","contrastBrightness.glsl":"uniform float u_contrastOffset;\nuniform float u_brightnessOffset;\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\nfloat maxI = 255.0;\nfloat mid = 128.0;\nfloat c = u_contrastOffset;\nfloat b = u_brightnessOffset;\nvec4 v;\nif (c > 0.0 && c < 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\n} else if (c <= 0.0 && c > -100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\n} else if (c == 100.0) {\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\nv = (sign(v) + 1.0) / 2.0;\n} else if (c == -100.0) {\nv = vec4(mid, mid, mid, currentPixel.a);\n}\nreturn vec4(v.r / 255.0, v.g / 255.0, v.b / 255.0, currentPixel.a);\n}","projection.glsl":"uniform sampler2D u_transformGrid;\nuniform vec2 u_transformSpacing;\nuniform vec2 u_transformGridSize;\nuniform vec2 u_targetImageSize;\nvec2 projectPixelLocation(vec2 coords) {\nvec2 index_image = floor(coords * u_targetImageSize);\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\nvec2 srcLocation;\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\nif (pos.s <= pos.t) {\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\n} else {\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\n}\nreturn srcLocation;\n}"},hillshade:{"hillshade.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform int u_hillshadeType;\nuniform float u_sinZcosAs[6];\nuniform float u_sinZsinAs[6];\nuniform float u_cosZs[6];\nuniform float u_weights[6];\nuniform vec2 u_factor;\nuniform float u_minValue;\nuniform float u_maxValue;\n#include <raster/lut/colorize.glsl>\nfloat getNeighborHoodAlpha(float a, float b, float c, float d, float e, float f, float g, float h, float i){\nif (a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0 || a == 0.0 || a == 0.0 || a==0.0) {\nreturn 0.0;\n}\nelse {\nreturn e;\n}\n}\nvec3 rgb2hsv(vec3 c) {\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\nfloat d = q.x - min(q.w, q.y);\nfloat e = 1.0e-10;\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\n}\nvec3 hsv2rgb(vec3 c) {\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\nvec3 hsv = rgb2hsv(rgb.xyz);\nhsv.z = hillshade;\nreturn vec4(hsv2rgb(hsv), 1.0) * rgb.a;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nif (currentPixel.a == 0.0) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec2 axy = vec2(-1.0, -1.0);\nvec2 bxy = vec2(0.0, -1.0);\nvec2 cxy = vec2(1.0, -1.0);\nvec2 dxy = vec2(-1.0, 0.0);\nvec2 fxy = vec2(1.0, 0.0);\nvec2 gxy = vec2(-1.0, 1.0);\nvec2 hxy = vec2(0.0, 1.0);\nvec2 ixy = vec2(1.0, 1.0);\nvec2 onePixel = 1.0 / u_srcImageSize;\nif (pixelLocation.s < onePixel.s) {\naxy[0] = 1.0;\ndxy[0] = 1.0;\ngxy[0] = 1.0;\n}\nif (pixelLocation.t < onePixel.t) {\naxy[1] = 1.0;\nbxy[1] = 1.0;\ncxy[1] = 1.0;\n}\nif (pixelLocation.s > 1.0 - onePixel.s) {\ncxy[0] = -1.0;\nfxy[0] = -1.0;\nixy[0] = -1.0;\n}\nif (pixelLocation.t > 1.0 - onePixel.t) {\ngxy[1] = -1.0;\nhxy[1] = -1.0;\nixy[1] = -1.0;\n}\nvec4 va = texture2D(u_image, pixelLocation + onePixel * axy);\nvec4 vb = texture2D(u_image, pixelLocation + onePixel * bxy);\nvec4 vc = texture2D(u_image, pixelLocation + onePixel * cxy);\nvec4 vd = texture2D(u_image, pixelLocation + onePixel * dxy);\nvec4 ve = texture2D(u_image, pixelLocation);\nvec4 vf = texture2D(u_image, pixelLocation + onePixel * fxy);\nvec4 vg = texture2D(u_image, pixelLocation + onePixel * gxy);\nvec4 vh = texture2D(u_image, pixelLocation + onePixel * hxy);\nvec4 vi = texture2D(u_image, pixelLocation + onePixel * ixy);\nfloat dzx = (vc + 2.0 * vf + vi - va - 2.0 * vd - vg).r * u_factor.s;\nfloat dzy = (vg + 2.0 * vh + vi - va - 2.0 * vb - vc).r * u_factor.t;\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\nfloat hillshade = 0.0;\nif (u_hillshadeType == 0){\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\nif (z < 0.0)  z = 0.0;\nhillshade = z;\n} else {\nfor (int k = 0; k < 6; k++) {\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\nif (z < 0.0) z = 0.0;\nhillshade = hillshade + z * u_weights[k];\nif (k == 5) break;\n}\n}\nfloat alpha = getNeighborHoodAlpha(va.a, vb.a, vc.a, vd.a, ve.a, vf.a, vg.a, vh.a, vi.a);\n#ifdef APPLY_COLORMAP\ngl_FragColor = overlay(ve.r, u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\n#else\ngl_FragColor = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\n#endif\n}","hillshade.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},lut:{"colorize.glsl":"uniform sampler2D u_colormap;\nuniform float u_colormapOffset;\nuniform float u_colormapMaxIndex;\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\nvec4 color = texture2D(u_colormap, clrPosition);\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\nreturn result;\n}","lut.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\n#include <raster/lut/colorize.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\nvec4 result = colorize(currentPixel, 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\n}","lut.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"},magdir:{"magdir.frag":"precision mediump float;\nvarying vec4 v_color;\nuniform lowp float u_opacity;\nvoid main() {\ngl_FragColor = v_color * u_opacity;\n}","magdir.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nuniform float u_rotation;\nuniform vec4 u_colors[12];\nvarying vec4 v_color;\nvoid main()\n{\nfloat angle = a_offset.y + u_rotation;\n#ifdef ROTATION_GEOGRAPHIC\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\n#endif\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\nv_color = u_colors[int(a_vv.x)];\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},reproject:{"reproject.frag":"precision mediump float;\nvarying vec2 v_texcoord;\n#include <raster/common/common.glsl>\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\n}","reproject.vert":"precision mediump float;\nattribute vec2 a_position;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_position;\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\n}"},scalar:{"scalar.frag":"precision mediump float;\nuniform lowp float u_opacity;\nvarying vec2 v_pos;\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\nconst float outlineSize = 0.02;\nconst float innerRadius = 0.25;\nconst float outerRadius = 0.42;\nconst float innerSquareLength = 0.15;\nvoid main() {\nmediump float dist = length(v_pos);\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\n#ifdef INNER_CIRCLE\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\n#else\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\n#endif\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\n}","scalar.vert":"precision mediump float;\nattribute vec2 a_pos;\nattribute vec2 a_offset;\nattribute vec2 a_vv;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform vec2 u_symbolSize;\nuniform vec2 u_symbolPercentRange;\nuniform vec2 u_dataRange;\nvarying vec2 v_pos;\nvoid main()\n{\n#ifdef DATA_RANGE\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\n#else\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\n#endif\nvec2 size = u_symbolSize * sizePercentage;\nvec2 pos = a_pos + a_offset * size;\nv_pos = a_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\n}"},stretch:{"stretch.frag":"precision mediump float;\nvarying highp vec2 v_texcoord;\n#include <raster/common/common.glsl>\nuniform float u_minCutOff[3];\nuniform float u_maxCutOff[3];\nuniform float u_minOutput;\nuniform float u_maxOutput;\nuniform float u_factor[3];\nuniform bool u_useGamma;\nuniform float u_gamma[3];\nuniform float u_gammaCorrection[3];\n#include <raster/lut/colorize.glsl>\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\nif (val >= maxCutOff) {\nreturn maxOutput;\n} else if (val <= minCutOff) {\nreturn minOutput;\n}\nfloat stretchedVal;\nif (useGamma) {\nfloat tempf = 1.0;\nfloat outRange = maxOutput - minOutput;\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\nif (gamma > 1.0) {\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\n}\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\n} else {\nstretchedVal = minOutput + (val - minCutOff) * factor;\n}\nreturn stretchedVal;\n}\nvoid main() {\nvec2 pixelLocation = getPixelLocation(v_texcoord);\nif (isOutside(pixelLocation)) {\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\nreturn;\n}\nvec4 currentPixel = getPixel(pixelLocation);\n#ifdef NOOP\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\nreturn;\n#endif\nif (u_bandCount == 1) {\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\n#ifdef APPLY_COLORMAP\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\n#else\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\n#endif\n} else {\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\n}\n}","stretch.vert":"precision mediump float;\nattribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform highp vec2 u_coordScale;\nuniform highp float u_scale;\nuniform highp vec2 u_offset;\nvarying highp vec2 v_texcoord;\nvoid main()\n{\nv_texcoord = a_pos * u_scale + u_offset;\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\n}"}},stencil:{"stencil.frag":"void main() {\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n}","stencil.vert":"attribute vec2 a_pos;\nvoid main() {\ngl_Position = vec4(a_pos, 0.0, 1.0);\n}"},tileInfo:{"tileInfo.frag":"uniform mediump sampler2D u_texture;\nvarying mediump vec2 v_tex;\nvoid main(void) {\nlowp vec4 color = texture2D(u_texture, v_tex);\ngl_FragColor = 0.75 * color;\n}","tileInfo.vert":"attribute vec2 a_pos;\nuniform highp mat3 u_dvsMat3;\nuniform mediump float u_depth;\nuniform mediump vec2 u_coord_ratio;\nuniform mediump vec2 u_delta;\nuniform mediump vec2 u_dimensions;\nvarying mediump vec2 v_tex;\nvoid main() {\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\nv_tex = a_pos;\n}"},util:{"encoding.glsl":"const vec4 rgba2float_factors = vec4(\n255.0 / (256.0),\n255.0 / (256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0),\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\n);\nfloat rgba2float(vec4 rgba) {\nreturn dot(rgba, rgba2float_factors);\n}"}});const b=new H.Z(function(A){let f=ae;return A.split("/").forEach(C=>{f&&(f=f[C])}),f});function T(A){return b.resolveIncludes(A)}},42789:(ye,j,s)=>{s.d(j,{Z:()=>I});class I{constructor(w){this.readFile=w}resolveIncludes(w){return this.resolve(w)}resolve(w,$=new Map){if($.has(w))return $.get(w);const Q=this.read(w);if(!Q)throw new Error(`cannot find shader file ${w}`);const ne=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let S=ne.exec(Q);const z=[];for(;null!=S;)z.push({path:S[1],start:S.index,length:S[0].length}),S=ne.exec(Q);let H=0,k="";return z.forEach(ae=>{k+=Q.slice(H,ae.start),k+=$.has(ae.path)?"":this.resolve(ae.path,$),H=ae.start+ae.length}),k+=Q.slice(H),$.set(w,k),k}read(w){return this.readFile(w)}}},91522:(ye,j,s)=>{s.d(j,{H:()=>w,K:()=>F});var I=s(25558);function F($){let Q="";for(const ne in $){const S=$[ne];if("boolean"==typeof S)S&&(Q+=`#define ${ne}\n`);else if("number"==typeof S)Q+=`#define ${ne} ${S.toFixed()}\n`;else if("object"==typeof S){const z=S.options;let H=0;for(const k in z)Q+=`#define ${z[k]} ${(H++).toFixed()}\n`;Q+=`#define ${ne} ${z[S.value]}\n`}}return Q}function w($,Q,ne,S){ne=ne||{},S=S||"";const z="function"==typeof Q.shaders?Q.shaders(ne):Q.shaders;return new I.$($,S+z.vertexShader,S+z.fragmentShader,Q.attributes)}},25522:(ye,j,s)=>{s.d(j,{iC:()=>ne,s9:()=>w,Br:()=>Q,zS:()=>H,Ue:()=>z,Tc:()=>S,Fm:()=>ae,xW:()=>k,v:()=>de,RA:()=>T,N9:()=>b}),s(27001);var F=s(13006);function w(f,C,D="nearest",O=!1){var M;const V=!(O&&"u8"===C.pixelType),ee=V?5126:5121,ie=null==C.pixels||0===C.pixels.length?null:V?C.getAsRGBAFloat():C.getAsRGBA(),Ie=null==(M=f.capabilities.textureFloat)?void 0:M.textureFloatLinear;return new F.Z(f,{width:C.width,height:C.height,target:3553,pixelFormat:6408,internalFormat:"webgl2"===f.webglVersion&&V?34836:6408,samplingMode:!Ie||"bilinear"!==D&&"cubic"!==D?9728:9729,dataType:ee,wrapMode:33071,flipped:!1},ie)}function Q(f,C){const D=4*C.size[0],O=C.size[1],M={width:D,height:O,target:3553,pixelFormat:6408,internalFormat:"webgl2"===f.webglVersion?34836:6408,dataType:5126,samplingMode:9728,wrapMode:33071,flipped:!1},V=new Float32Array(D*O*4);let ee=0;for(let ie=0;ie<C.coefficients.length;ie++)V[ee++]=C.coefficients[ie],ie%3==2&&(V[ee++]=1);return new F.Z(f,M,V)}function ne(f,C){return new F.Z(f,{width:C.length/4,height:1,target:3553,pixelFormat:6408,internalFormat:6408,dataType:5121,samplingMode:9728,wrapMode:33071,flipped:!1},C)}function S(f,C,D,O=1,M=!0,V=!1){return{u_flipY:M,u_isFloatTexture:V,u_applyTransform:!!f,u_opacity:O,u_transformSpacing:f?f.spacing:null,u_transformGridSize:f?f.size:null,u_targetImageSize:C,u_srcImageSize:D}}function z(f,C){return{u_colormapOffset:C||0,u_colormapMaxIndex:f?f.length/4-1:null}}function H(f,C){return{u_scale:f,u_offset:C}}function k(f){return{u_bandCount:f.bandCount,u_minOutput:f.outMin,u_maxOutput:f.outMax,u_minCutOff:f.minCutOff,u_maxCutOff:f.maxCutOff,u_factor:f.factor,u_useGamma:f.useGamma,u_gamma:f.gamma,u_gammaCorrection:f.gammaCorrection}}function ae(f){return{u_hillshadeType:f.hillshadeType,u_sinZcosAs:f.sinZcosAs,u_sinZsinAs:f.sinZsinAs,u_cosZs:f.cosZs,u_weights:f.weights,u_factor:f.factor,u_minValue:f.minValue,u_maxValue:f.maxValue}}function de(f,C){const D=f.gl,O=C.glName,M=D.getProgramParameter(O,D.ACTIVE_UNIFORMS),V=new Map;let ee;for(let ie=0;ie<M;ie++)ee=D.getActiveUniform(O,ie),ee&&V.set(ee.name,{location:D.getUniformLocation(O,ee.name),info:ee});return V}function b(f,C,D){Object.keys(D).forEach(O=>{const M=C.get(O)||C.get(O+"[0]");M&&function(f,C,D,O){if(null===O||null==D)return!1;const{info:M}=O;switch(M.type){case 5126:M.size>1?f.setUniform1fv(C,D):f.setUniform1f(C,D);break;case 35664:f.setUniform2fv(C,D);break;case 35665:f.setUniform3fv(C,D);break;case 35666:f.setUniform4fv(C,D);break;case 35675:f.setUniformMatrix3fv(C,D);break;case 35676:f.setUniformMatrix4fv(C,D);break;case 5124:M.size>1?f.setUniform1iv(C,D):f.setUniform1i(C,D);break;case 35670:f.setUniform1i(C,D?1:0);break;case 35667:case 35671:f.setUniform2iv(C,D);break;case 35668:case 35672:f.setUniform3iv(C,D);break;case 35669:case 35673:f.setUniform4iv(C,D);break;default:;}}(f,O,D[O],M)})}function T(f,C,D,O){D.length===O.length&&(O.some(M=>null==M)||D.some(M=>null==M)||D.forEach((M,V)=>{C.setUniform1i(M,V),f.bindTexture(O[V],V)}))}}}]);